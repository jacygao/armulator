//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace ApplicationGatewayController
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IApplicationGatewaysController
    {

        /// <remarks>
        /// Deletes the specified application gateway.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="applicationGatewayName">The name of the application gateway.</param>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Delete successful.</returns>

        System.Threading.Tasks.Task DeleteAsync(string resourceGroupName, string applicationGatewayName, string api_version, string subscriptionId);

        /// <remarks>
        /// Gets the specified application gateway.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="applicationGatewayName">The name of the application gateway.</param>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Request successful. The operation returns an ApplicationGateway resource.</returns>

        System.Threading.Tasks.Task<ApplicationGateway> GetAsync(string resourceGroupName, string applicationGatewayName, string api_version, string subscriptionId);

        /// <remarks>
        /// Creates or updates the specified application gateway.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="applicationGatewayName">The name of the application gateway.</param>

        /// <param name="parameters">Parameters supplied to the create or update application gateway operation.</param>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Update successful. The operation returns the resulting ApplicationGateway resource.</returns>

        System.Threading.Tasks.Task<ApplicationGateway> CreateOrUpdateAsync(string resourceGroupName, string applicationGatewayName, ApplicationGateway parameters, string api_version, string subscriptionId);

        /// <remarks>
        /// Updates the specified application gateway tags.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="applicationGatewayName">The name of the application gateway.</param>

        /// <param name="parameters">Parameters supplied to update application gateway tags.</param>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Update successful. The operation returns the resulting ApplicationGateway resource.</returns>

        System.Threading.Tasks.Task<ApplicationGateway> UpdateTagsAsync(string resourceGroupName, string applicationGatewayName, TagsObject parameters, string api_version, string subscriptionId);

        /// <remarks>
        /// Lists all application gateways in a resource group.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Success. The operation returns a list of ApplicationGateway resources.</returns>

        System.Threading.Tasks.Task<ApplicationGatewayListResult> ListAsync(string resourceGroupName, string api_version, string subscriptionId);

        /// <remarks>
        /// Gets all the application gateways in a subscription.
        /// </remarks>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Success. The operation returns a list of ApplicationGateway resources.</returns>

        System.Threading.Tasks.Task<ApplicationGatewayListResult> ListAllAsync(string api_version, string subscriptionId);

        /// <remarks>
        /// Starts the specified application gateway.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="applicationGatewayName">The name of the application gateway.</param>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Request successful. The operation starts the ApplicationGateway resource.</returns>

        System.Threading.Tasks.Task StartAsync(string resourceGroupName, string applicationGatewayName, string api_version, string subscriptionId);

        /// <remarks>
        /// Stops the specified application gateway in a resource group.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="applicationGatewayName">The name of the application gateway.</param>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Request successful. The operation stops the ApplicationGateway resource.</returns>

        System.Threading.Tasks.Task StopAsync(string resourceGroupName, string applicationGatewayName, string api_version, string subscriptionId);

        /// <remarks>
        /// Gets the backend health of the specified application gateway in a resource group.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="applicationGatewayName">The name of the application gateway.</param>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="expand">Expands BackendAddressPool and BackendHttpSettings referenced in backend health.</param>

        /// <returns>Request successful.</returns>

        System.Threading.Tasks.Task<ApplicationGatewayBackendHealth> BackendHealthAsync(string resourceGroupName, string applicationGatewayName, string api_version, string subscriptionId, string expand);

        /// <remarks>
        /// Gets the backend health for given combination of backend pool and http setting of the specified application gateway in a resource group.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="applicationGatewayName">The name of the application gateway.</param>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="expand">Expands BackendAddressPool and BackendHttpSettings referenced in backend health.</param>

        /// <param name="probeRequest">Request body for on-demand test probe operation.</param>

        /// <returns>Request successful.</returns>

        System.Threading.Tasks.Task<ApplicationGatewayBackendHealthOnDemand> BackendHealthOnDemandAsync(string resourceGroupName, string applicationGatewayName, string api_version, string subscriptionId, string expand, ApplicationGatewayOnDemandProbe probeRequest);

        /// <remarks>
        /// Lists all available server variables.
        /// </remarks>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Success. The operation returns a list of all available server variables.</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ListAvailableServerVariablesAsync(string api_version, string subscriptionId);

        /// <remarks>
        /// Lists all available request headers.
        /// </remarks>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Success. The operation returns a list of all available request headers.</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ListAvailableRequestHeadersAsync(string api_version, string subscriptionId);

        /// <remarks>
        /// Lists all available response headers.
        /// </remarks>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Success. The operation returns a list of all available response headers.</returns>

        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ListAvailableResponseHeadersAsync(string api_version, string subscriptionId);

        /// <remarks>
        /// Lists all available web application firewall rule sets.
        /// </remarks>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Success. The operation returns a list of all available web application firewall rule sets.</returns>

        System.Threading.Tasks.Task<ApplicationGatewayAvailableWafRuleSetsResult> ListAvailableWafRuleSetsAsync(string api_version, string subscriptionId);

        /// <remarks>
        /// Lists available Ssl options for configuring Ssl policy.
        /// </remarks>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Success. The operation returns all available Ssl options for configuring Ssl policy.</returns>

        System.Threading.Tasks.Task<ApplicationGatewayAvailableSslOptions> ListAvailableSslOptionsAsync(string api_version, string subscriptionId);

        /// <remarks>
        /// Lists all SSL predefined policies for configuring Ssl policy.
        /// </remarks>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Success. The operation returns a lists of all Ssl predefined policies for configuring Ssl policy.</returns>

        System.Threading.Tasks.Task<ApplicationGatewayAvailableSslPredefinedPolicies> ListAvailableSslPredefinedPoliciesAsync(string api_version, string subscriptionId);

        /// <remarks>
        /// Gets Ssl predefined policy with the specified policy name.
        /// </remarks>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="predefinedPolicyName">Name of Ssl predefined policy.</param>

        /// <returns>Success. The operation returns a Ssl predefined policy with the specified policy name.</returns>

        System.Threading.Tasks.Task<ApplicationGatewaySslPredefinedPolicy> GetSslPredefinedPolicyAsync(string api_version, string subscriptionId, string predefinedPolicyName);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class ApplicationGatewaysController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IApplicationGatewaysController _implementation;

        public ApplicationGatewaysController(IApplicationGatewaysController implementation)
        {
            _implementation = implementation;
        }

        /// <remarks>
        /// Deletes the specified application gateway.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="applicationGatewayName">The name of the application gateway.</param>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Delete successful.</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}")]
        public System.Threading.Tasks.Task Delete(string resourceGroupName, string applicationGatewayName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.DeleteAsync(resourceGroupName, applicationGatewayName, api_version, subscriptionId);
        }

        /// <remarks>
        /// Gets the specified application gateway.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="applicationGatewayName">The name of the application gateway.</param>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Request successful. The operation returns an ApplicationGateway resource.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}")]
        public System.Threading.Tasks.Task<ApplicationGateway> Get(string resourceGroupName, string applicationGatewayName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.GetAsync(resourceGroupName, applicationGatewayName, api_version, subscriptionId);
        }

        /// <remarks>
        /// Creates or updates the specified application gateway.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="applicationGatewayName">The name of the application gateway.</param>
        /// <param name="parameters">Parameters supplied to the create or update application gateway operation.</param>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Update successful. The operation returns the resulting ApplicationGateway resource.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}")]
        public System.Threading.Tasks.Task<ApplicationGateway> CreateOrUpdate(string resourceGroupName, string applicationGatewayName, [Microsoft.AspNetCore.Mvc.FromBody] ApplicationGateway parameters, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.CreateOrUpdateAsync(resourceGroupName, applicationGatewayName, parameters, api_version, subscriptionId);
        }

        /// <remarks>
        /// Updates the specified application gateway tags.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="applicationGatewayName">The name of the application gateway.</param>
        /// <param name="parameters">Parameters supplied to update application gateway tags.</param>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Update successful. The operation returns the resulting ApplicationGateway resource.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}")]
        public System.Threading.Tasks.Task<ApplicationGateway> UpdateTags(string resourceGroupName, string applicationGatewayName, [Microsoft.AspNetCore.Mvc.FromBody] TagsObject parameters, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.UpdateTagsAsync(resourceGroupName, applicationGatewayName, parameters, api_version, subscriptionId);
        }

        /// <remarks>
        /// Lists all application gateways in a resource group.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Success. The operation returns a list of ApplicationGateway resources.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways")]
        public System.Threading.Tasks.Task<ApplicationGatewayListResult> List(string resourceGroupName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.ListAsync(resourceGroupName, api_version, subscriptionId);
        }

        /// <remarks>
        /// Gets all the application gateways in a subscription.
        /// </remarks>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Success. The operation returns a list of ApplicationGateway resources.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGateways")]
        public System.Threading.Tasks.Task<ApplicationGatewayListResult> ListAll([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.ListAllAsync(api_version, subscriptionId);
        }

        /// <remarks>
        /// Starts the specified application gateway.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="applicationGatewayName">The name of the application gateway.</param>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Request successful. The operation starts the ApplicationGateway resource.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/start")]
        public System.Threading.Tasks.Task Start(string resourceGroupName, string applicationGatewayName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.StartAsync(resourceGroupName, applicationGatewayName, api_version, subscriptionId);
        }

        /// <remarks>
        /// Stops the specified application gateway in a resource group.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="applicationGatewayName">The name of the application gateway.</param>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Request successful. The operation stops the ApplicationGateway resource.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/stop")]
        public System.Threading.Tasks.Task Stop(string resourceGroupName, string applicationGatewayName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.StopAsync(resourceGroupName, applicationGatewayName, api_version, subscriptionId);
        }

        /// <remarks>
        /// Gets the backend health of the specified application gateway in a resource group.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="applicationGatewayName">The name of the application gateway.</param>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="expand">Expands BackendAddressPool and BackendHttpSettings referenced in backend health.</param>
        /// <returns>Request successful.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/backendhealth")]
        public System.Threading.Tasks.Task<ApplicationGatewayBackendHealth> BackendHealth(string resourceGroupName, string applicationGatewayName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "$expand")] string expand)
        {

            return _implementation.BackendHealthAsync(resourceGroupName, applicationGatewayName, api_version, subscriptionId, expand);
        }

        /// <remarks>
        /// Gets the backend health for given combination of backend pool and http setting of the specified application gateway in a resource group.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="applicationGatewayName">The name of the application gateway.</param>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="expand">Expands BackendAddressPool and BackendHttpSettings referenced in backend health.</param>
        /// <param name="probeRequest">Request body for on-demand test probe operation.</param>
        /// <returns>Request successful.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/getBackendHealthOnDemand")]
        public System.Threading.Tasks.Task<ApplicationGatewayBackendHealthOnDemand> BackendHealthOnDemand(string resourceGroupName, string applicationGatewayName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "$expand")] string expand, [Microsoft.AspNetCore.Mvc.FromBody] ApplicationGatewayOnDemandProbe probeRequest)
        {

            return _implementation.BackendHealthOnDemandAsync(resourceGroupName, applicationGatewayName, api_version, subscriptionId, expand, probeRequest);
        }

        /// <remarks>
        /// Lists all available server variables.
        /// </remarks>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Success. The operation returns a list of all available server variables.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableServerVariables")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ListAvailableServerVariables([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.ListAvailableServerVariablesAsync(api_version, subscriptionId);
        }

        /// <remarks>
        /// Lists all available request headers.
        /// </remarks>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Success. The operation returns a list of all available request headers.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableRequestHeaders")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ListAvailableRequestHeaders([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.ListAvailableRequestHeadersAsync(api_version, subscriptionId);
        }

        /// <remarks>
        /// Lists all available response headers.
        /// </remarks>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Success. The operation returns a list of all available response headers.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableResponseHeaders")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ListAvailableResponseHeaders([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.ListAvailableResponseHeadersAsync(api_version, subscriptionId);
        }

        /// <remarks>
        /// Lists all available web application firewall rule sets.
        /// </remarks>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Success. The operation returns a list of all available web application firewall rule sets.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableWafRuleSets")]
        public System.Threading.Tasks.Task<ApplicationGatewayAvailableWafRuleSetsResult> ListAvailableWafRuleSets([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.ListAvailableWafRuleSetsAsync(api_version, subscriptionId);
        }

        /// <remarks>
        /// Lists available Ssl options for configuring Ssl policy.
        /// </remarks>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Success. The operation returns all available Ssl options for configuring Ssl policy.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default")]
        public System.Threading.Tasks.Task<ApplicationGatewayAvailableSslOptions> ListAvailableSslOptions([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.ListAvailableSslOptionsAsync(api_version, subscriptionId);
        }

        /// <remarks>
        /// Lists all SSL predefined policies for configuring Ssl policy.
        /// </remarks>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Success. The operation returns a lists of all Ssl predefined policies for configuring Ssl policy.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default/predefinedPolicies")]
        public System.Threading.Tasks.Task<ApplicationGatewayAvailableSslPredefinedPolicies> ListAvailableSslPredefinedPolicies([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.ListAvailableSslPredefinedPoliciesAsync(api_version, subscriptionId);
        }

        /// <remarks>
        /// Gets Ssl predefined policy with the specified policy name.
        /// </remarks>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="predefinedPolicyName">Name of Ssl predefined policy.</param>
        /// <returns>Success. The operation returns a Ssl predefined policy with the specified policy name.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/providers/Microsoft.Network/applicationGatewayAvailableSslOptions/default/predefinedPolicies/{predefinedPolicyName}")]
        public System.Threading.Tasks.Task<ApplicationGatewaySslPredefinedPolicy> GetSslPredefinedPolicy([Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId, string predefinedPolicyName)
        {

            return _implementation.GetSslPredefinedPolicyAsync(api_version, subscriptionId, predefinedPolicyName);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IApplicationGatewayPrivateLinkResourcesController
    {

        /// <remarks>
        /// Lists all private link resources on an application gateway.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="applicationGatewayName">The name of the application gateway.</param>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Success. The operation returns a list of private link resources on application gateway.</returns>

        System.Threading.Tasks.Task<ApplicationGatewayPrivateLinkResourceListResult> ListAsync(string resourceGroupName, string applicationGatewayName, string api_version, string subscriptionId);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class ApplicationGatewayPrivateLinkResourcesController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IApplicationGatewayPrivateLinkResourcesController _implementation;

        public ApplicationGatewayPrivateLinkResourcesController(IApplicationGatewayPrivateLinkResourcesController implementation)
        {
            _implementation = implementation;
        }

        /// <remarks>
        /// Lists all private link resources on an application gateway.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="applicationGatewayName">The name of the application gateway.</param>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Success. The operation returns a list of private link resources on application gateway.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/privateLinkResources")]
        public System.Threading.Tasks.Task<ApplicationGatewayPrivateLinkResourceListResult> List(string resourceGroupName, string applicationGatewayName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.ListAsync(resourceGroupName, applicationGatewayName, api_version, subscriptionId);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IApplicationGatewayPrivateEndpointConnectionsController
    {

        /// <remarks>
        /// Deletes the specified private endpoint connection on application gateway.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="applicationGatewayName">The name of the application gateway.</param>

        /// <param name="connectionName">The name of the application gateway private endpoint connection.</param>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Delete successful.</returns>

        System.Threading.Tasks.Task DeleteAsync(string resourceGroupName, string applicationGatewayName, string connectionName, string api_version, string subscriptionId);

        /// <remarks>
        /// Updates the specified private endpoint connection on application gateway.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="applicationGatewayName">The name of the application gateway.</param>

        /// <param name="connectionName">The name of the application gateway private endpoint connection.</param>

        /// <param name="parameters">Parameters supplied to update application gateway private endpoint connection operation.</param>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Update successful. The operation returns the resulting private endpoint connection on application gateway.</returns>

        System.Threading.Tasks.Task<ApplicationGatewayPrivateEndpointConnection> UpdateAsync(string resourceGroupName, string applicationGatewayName, string connectionName, ApplicationGatewayPrivateEndpointConnection parameters, string api_version, string subscriptionId);

        /// <remarks>
        /// Gets the specified private endpoint connection on application gateway.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="applicationGatewayName">The name of the application gateway.</param>

        /// <param name="connectionName">The name of the application gateway private endpoint connection.</param>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Request successful. The operation returns an application gateway private endpoint connection.</returns>

        System.Threading.Tasks.Task<ApplicationGatewayPrivateEndpointConnection> GetAsync(string resourceGroupName, string applicationGatewayName, string connectionName, string api_version, string subscriptionId);

        /// <remarks>
        /// Lists all private endpoint connections on an application gateway.
        /// </remarks>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="applicationGatewayName">The name of the application gateway.</param>

        /// <param name="api_version">Client API version.</param>

        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <returns>Success. The operation returns a list of private endpoint connections on application gateway.</returns>

        System.Threading.Tasks.Task<ApplicationGatewayPrivateEndpointConnectionListResult> ListAsync(string resourceGroupName, string applicationGatewayName, string api_version, string subscriptionId);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class ApplicationGatewayPrivateEndpointConnectionsController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IApplicationGatewayPrivateEndpointConnectionsController _implementation;

        public ApplicationGatewayPrivateEndpointConnectionsController(IApplicationGatewayPrivateEndpointConnectionsController implementation)
        {
            _implementation = implementation;
        }

        /// <remarks>
        /// Deletes the specified private endpoint connection on application gateway.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="applicationGatewayName">The name of the application gateway.</param>
        /// <param name="connectionName">The name of the application gateway private endpoint connection.</param>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Delete successful.</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/privateEndpointConnections/{connectionName}")]
        public System.Threading.Tasks.Task Delete(string resourceGroupName, string applicationGatewayName, string connectionName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.DeleteAsync(resourceGroupName, applicationGatewayName, connectionName, api_version, subscriptionId);
        }

        /// <remarks>
        /// Updates the specified private endpoint connection on application gateway.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="applicationGatewayName">The name of the application gateway.</param>
        /// <param name="connectionName">The name of the application gateway private endpoint connection.</param>
        /// <param name="parameters">Parameters supplied to update application gateway private endpoint connection operation.</param>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Update successful. The operation returns the resulting private endpoint connection on application gateway.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/privateEndpointConnections/{connectionName}")]
        public System.Threading.Tasks.Task<ApplicationGatewayPrivateEndpointConnection> Update(string resourceGroupName, string applicationGatewayName, string connectionName, [Microsoft.AspNetCore.Mvc.FromBody] ApplicationGatewayPrivateEndpointConnection parameters, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.UpdateAsync(resourceGroupName, applicationGatewayName, connectionName, parameters, api_version, subscriptionId);
        }

        /// <remarks>
        /// Gets the specified private endpoint connection on application gateway.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="applicationGatewayName">The name of the application gateway.</param>
        /// <param name="connectionName">The name of the application gateway private endpoint connection.</param>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Request successful. The operation returns an application gateway private endpoint connection.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/privateEndpointConnections/{connectionName}")]
        public System.Threading.Tasks.Task<ApplicationGatewayPrivateEndpointConnection> Get(string resourceGroupName, string applicationGatewayName, string connectionName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.GetAsync(resourceGroupName, applicationGatewayName, connectionName, api_version, subscriptionId);
        }

        /// <remarks>
        /// Lists all private endpoint connections on an application gateway.
        /// </remarks>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="applicationGatewayName">The name of the application gateway.</param>
        /// <param name="api_version">Client API version.</param>
        /// <param name="subscriptionId">The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <returns>Success. The operation returns a list of private endpoint connections on application gateway.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/applicationGateways/{applicationGatewayName}/privateEndpointConnections")]
        public System.Threading.Tasks.Task<ApplicationGatewayPrivateEndpointConnectionListResult> List(string resourceGroupName, string applicationGatewayName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, string subscriptionId)
        {

            return _implementation.ListAsync(resourceGroupName, applicationGatewayName, api_version, subscriptionId);
        }

    }

    /// <summary>
    /// Details of on demand test probe request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayOnDemandProbe
    {
        /// <summary>
        /// The protocol used for the probe.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayProtocol? Protocol { get; set; }

        /// <summary>
        /// Host name to send the probe to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("host", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Host { get; set; }

        /// <summary>
        /// Relative path of probe. Valid path starts from '/'. Probe is sent to &lt;Protocol&gt;://&lt;host&gt;:&lt;port&gt;&lt;path&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Timeout { get; set; }

        /// <summary>
        /// Whether the host header should be picked from the backend http settings. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickHostNameFromBackendHttpSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PickHostNameFromBackendHttpSettings { get; set; }

        /// <summary>
        /// Criterion for classifying a healthy probe response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("match", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayProbeHealthResponseMatch Match { get; set; }

        /// <summary>
        /// Reference to backend pool of application gateway to which probe request will be sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddressPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource BackendAddressPool { get; set; }

        /// <summary>
        /// Reference to backend http setting of application gateway to be used for test probe.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendHttpSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource BackendHttpSettings { get; set; }

    }

    /// <summary>
    /// Result of on demand test probe.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayBackendHealthOnDemand
    {
        /// <summary>
        /// Reference to an ApplicationGatewayBackendAddressPool resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddressPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayBackendAddressPool BackendAddressPool { get; set; }

        /// <summary>
        /// Application gateway BackendHealthHttp settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendHealthHttpSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayBackendHealthHttpSettings BackendHealthHttpSettings { get; set; }

    }

    /// <summary>
    /// Response for ApplicationGatewayBackendHealth API service call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayBackendHealth
    {
        /// <summary>
        /// A list of ApplicationGatewayBackendHealthPool resources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddressPools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayBackendHealthPool> BackendAddressPools { get; set; }

    }

    /// <summary>
    /// Application gateway BackendHealth pool.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayBackendHealthPool
    {
        /// <summary>
        /// Reference to an ApplicationGatewayBackendAddressPool resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddressPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayBackendAddressPool BackendAddressPool { get; set; }

        /// <summary>
        /// List of ApplicationGatewayBackendHealthHttpSettings resources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendHttpSettingsCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayBackendHealthHttpSettings> BackendHttpSettingsCollection { get; set; }

    }

    /// <summary>
    /// Application gateway BackendHealthHttp settings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayBackendHealthHttpSettings
    {
        /// <summary>
        /// Reference to an ApplicationGatewayBackendHttpSettings resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendHttpSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayBackendHttpSettings BackendHttpSettings { get; set; }

        /// <summary>
        /// List of ApplicationGatewayBackendHealthServer resources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("servers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayBackendHealthServer> Servers { get; set; }

    }

    /// <summary>
    /// Application gateway backendhealth http settings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayBackendHealthServer
    {
        /// <summary>
        /// IP address or FQDN of backend server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// Reference to IP configuration of backend server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkInterfaceIPConfiguration IpConfiguration { get; set; }

        /// <summary>
        /// Health of backend server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("health", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayBackendHealthServerHealth? Health { get; set; }

        /// <summary>
        /// Health Probe Log.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("healthProbeLog", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HealthProbeLog { get; set; }

    }

    /// <summary>
    /// SKU of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewaySku
    {
        /// <summary>
        /// Name of an application gateway SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewaySkuName? Name { get; set; }

        /// <summary>
        /// Tier of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewaySkuTier? Tier { get; set; }

        /// <summary>
        /// Capacity (instance count) of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("capacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Capacity { get; set; }

        /// <summary>
        /// Family of an application gateway SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("family", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewaySkuFamily? Family { get; set; }

    }

    /// <summary>
    /// Application Gateway Ssl policy.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewaySslPolicy
    {
        /// <summary>
        /// Ssl protocols to be disabled on application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabledSslProtocols", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<ProtocolsEnum> DisabledSslProtocols { get; set; }

        /// <summary>
        /// Type of Ssl Policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewaySslPolicyPolicyType? PolicyType { get; set; }

        /// <summary>
        /// Name of Ssl predefined policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PolicyNameEnum? PolicyName { get; set; }

        /// <summary>
        /// Ssl cipher suites to be enabled in the specified order to application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cipherSuites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<CipherSuitesEnum> CipherSuites { get; set; }

        /// <summary>
        /// Minimum version of Ssl protocol to be supported on application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minProtocolVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProtocolsEnum? MinProtocolVersion { get; set; }

    }

    /// <summary>
    /// Application gateway client authentication configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayClientAuthConfiguration
    {
        /// <summary>
        /// Verify client certificate issuer name on the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verifyClientCertIssuerDN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VerifyClientCertIssuerDN { get; set; }

        /// <summary>
        /// Verify client certificate revocation status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("verifyClientRevocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayClientAuthConfigurationVerifyClientRevocation? VerifyClientRevocation { get; set; }

    }

    /// <summary>
    /// Properties of IP configuration of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayIPConfigurationPropertiesFormat
    {
        /// <summary>
        /// Reference to the subnet resource. A subnet from where application gateway gets its private address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource Subnet { get; set; }

        /// <summary>
        /// The provisioning state of the application gateway IP configuration resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// IP configuration of an application gateway. Currently 1 public and 1 private IP configuration is allowed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayIPConfiguration : SubResource
    {
        /// <summary>
        /// Properties of the application gateway IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayIPConfigurationPropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the IP configuration that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Authentication certificates properties of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayAuthenticationCertificatePropertiesFormat
    {
        /// <summary>
        /// Certificate public data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// The provisioning state of the authentication certificate resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// Authentication certificates of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayAuthenticationCertificate : SubResource
    {
        /// <summary>
        /// Properties of the application gateway authentication certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayAuthenticationCertificatePropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the authentication certificate that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Trusted Root certificates properties of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayTrustedRootCertificatePropertiesFormat
    {
        /// <summary>
        /// Certificate public data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyVaultSecretId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeyVaultSecretId { get; set; }

        /// <summary>
        /// The provisioning state of the trusted root certificate resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// Trusted Root certificates of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayTrustedRootCertificate : SubResource
    {
        /// <summary>
        /// Properties of the application gateway trusted root certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayTrustedRootCertificatePropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the trusted root certificate that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Trusted client certificates properties of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayTrustedClientCertificatePropertiesFormat
    {
        /// <summary>
        /// Certificate public data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// Validated certificate data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validatedCertData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValidatedCertData { get; set; }

        /// <summary>
        /// Distinguished name of client certificate issuer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientCertIssuerDN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientCertIssuerDN { get; set; }

        /// <summary>
        /// The provisioning state of the trusted client certificate resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// Trusted client certificates of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayTrustedClientCertificate : SubResource
    {
        /// <summary>
        /// Properties of the application gateway trusted client certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayTrustedClientCertificatePropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the trusted client certificate that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of SSL certificates of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewaySslCertificatePropertiesFormat
    {
        /// <summary>
        /// Base-64 encoded pfx certificate. Only applicable in PUT Request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// Password for the pfx file specified in data. Only applicable in PUT request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// Base-64 encoded Public cert data corresponding to pfx specified in data. Only applicable in GET request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicCertData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicCertData { get; set; }

        /// <summary>
        /// Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyVaultSecretId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeyVaultSecretId { get; set; }

        /// <summary>
        /// The provisioning state of the SSL certificate resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// SSL certificates of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewaySslCertificate : SubResource
    {
        /// <summary>
        /// Properties of the application gateway SSL certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewaySslCertificatePropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the SSL certificate that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of Frontend IP configuration of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayFrontendIPConfigurationPropertiesFormat
    {
        /// <summary>
        /// PrivateIPAddress of the network interface IP Configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivateIPAddress { get; set; }

        /// <summary>
        /// The private IP address allocation method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAllocationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IPAllocationMethod? PrivateIPAllocationMethod { get; set; }

        /// <summary>
        /// Reference to the subnet resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource Subnet { get; set; }

        /// <summary>
        /// Reference to the PublicIP resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIPAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource PublicIPAddress { get; set; }

        /// <summary>
        /// Reference to the application gateway private link configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateLinkConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource PrivateLinkConfiguration { get; set; }

        /// <summary>
        /// The provisioning state of the frontend IP configuration resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// Frontend IP configuration of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayFrontendIPConfiguration : SubResource
    {
        /// <summary>
        /// Properties of the application gateway frontend IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayFrontendIPConfigurationPropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the frontend IP configuration that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of Frontend port of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayFrontendPortPropertiesFormat
    {
        /// <summary>
        /// Frontend port.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Port { get; set; }

        /// <summary>
        /// The provisioning state of the frontend port resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// Frontend port of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayFrontendPort : SubResource
    {
        /// <summary>
        /// Properties of the application gateway frontend port.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayFrontendPortPropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the frontend port that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Backend address of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayBackendAddress
    {
        /// <summary>
        /// Fully qualified domain name (FQDN).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fqdn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fqdn { get; set; }

        /// <summary>
        /// IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IpAddress { get; set; }

    }

    /// <summary>
    /// Properties of Backend Address Pool of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayBackendAddressPoolPropertiesFormat
    {
        /// <summary>
        /// Collection of references to IPs defined in network interfaces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendIPConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NetworkInterfaceIPConfiguration> BackendIPConfigurations { get; set; }

        /// <summary>
        /// Backend addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayBackendAddress> BackendAddresses { get; set; }

        /// <summary>
        /// The provisioning state of the backend address pool resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// Backend Address Pool of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayBackendAddressPool : SubResource
    {
        /// <summary>
        /// Properties of the application gateway backend address pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayBackendAddressPoolPropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the backend address pool that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of Backend address pool settings of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayBackendHttpSettingsPropertiesFormat
    {
        /// <summary>
        /// The destination port on the backend.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Port { get; set; }

        /// <summary>
        /// The protocol used to communicate with the backend.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayProtocol? Protocol { get; set; }

        /// <summary>
        /// Cookie based affinity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cookieBasedAffinity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayBackendHttpSettingsPropertiesFormatCookieBasedAffinity? CookieBasedAffinity { get; set; }

        /// <summary>
        /// Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout. Acceptable values are from 1 second to 86400 seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RequestTimeout { get; set; }

        /// <summary>
        /// Probe resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("probe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource Probe { get; set; }

        /// <summary>
        /// Array of references to application gateway authentication certificates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authenticationCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> AuthenticationCertificates { get; set; }

        /// <summary>
        /// Array of references to application gateway trusted root certificates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trustedRootCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> TrustedRootCertificates { get; set; }

        /// <summary>
        /// Connection draining of the backend http settings resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("connectionDraining", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayConnectionDraining ConnectionDraining { get; set; }

        /// <summary>
        /// Host header to be sent to the backend servers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }

        /// <summary>
        /// Whether to pick host header should be picked from the host name of the backend server. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickHostNameFromBackendAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PickHostNameFromBackendAddress { get; set; }

        /// <summary>
        /// Cookie name to use for the affinity cookie.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affinityCookieName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffinityCookieName { get; set; }

        /// <summary>
        /// Whether the probe is enabled. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("probeEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProbeEnabled { get; set; }

        /// <summary>
        /// Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// The provisioning state of the backend HTTP settings resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// Backend address pool settings of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayBackendHttpSettings : SubResource
    {
        /// <summary>
        /// Properties of the application gateway backend HTTP settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayBackendHttpSettingsPropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the backend http settings that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of Backend address pool settings of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayBackendSettingsPropertiesFormat
    {
        /// <summary>
        /// The destination port on the backend.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Port { get; set; }

        /// <summary>
        /// The protocol used to communicate with the backend.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayProtocol? Protocol { get; set; }

        /// <summary>
        /// Connection timeout in seconds. Application Gateway will fail the request if response is not received within ConnectionTimeout. Acceptable values are from 1 second to 86400 seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Timeout { get; set; }

        /// <summary>
        /// Probe resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("probe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource Probe { get; set; }

        /// <summary>
        /// Array of references to application gateway trusted root certificates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trustedRootCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> TrustedRootCertificates { get; set; }

        /// <summary>
        /// Server name indication to be sent to the backend servers for Tls protocol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }

        /// <summary>
        /// Whether to pick server name indication from the host name of the backend server for Tls protocol. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickHostNameFromBackendAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PickHostNameFromBackendAddress { get; set; }

        /// <summary>
        /// The provisioning state of the backend HTTP settings resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// Backend address pool settings of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayBackendSettings : SubResource
    {
        /// <summary>
        /// Properties of the application gateway backend settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayBackendSettingsPropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the backend settings that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of SSL profile of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewaySslProfilePropertiesFormat
    {
        /// <summary>
        /// Array of references to application gateway trusted client certificates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trustedClientCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> TrustedClientCertificates { get; set; }

        /// <summary>
        /// SSL policy of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sslPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewaySslPolicy SslPolicy { get; set; }

        /// <summary>
        /// Client authentication configuration of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientAuthConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayClientAuthConfiguration ClientAuthConfiguration { get; set; }

        /// <summary>
        /// The provisioning state of the HTTP listener resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// SSL profile of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewaySslProfile : SubResource
    {
        /// <summary>
        /// Properties of the application gateway SSL profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewaySslProfilePropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the SSL profile that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of HTTP listener of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayHttpListenerPropertiesFormat
    {
        /// <summary>
        /// Frontend IP configuration resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendIPConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource FrontendIPConfiguration { get; set; }

        /// <summary>
        /// Frontend port resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource FrontendPort { get; set; }

        /// <summary>
        /// Protocol of the HTTP listener.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayProtocol? Protocol { get; set; }

        /// <summary>
        /// Host name of HTTP listener.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hostName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HostName { get; set; }

        /// <summary>
        /// SSL certificate resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sslCertificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource SslCertificate { get; set; }

        /// <summary>
        /// SSL profile resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sslProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource SslProfile { get; set; }

        /// <summary>
        /// Applicable only if protocol is https. Enables SNI for multi-hosting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requireServerNameIndication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequireServerNameIndication { get; set; }

        /// <summary>
        /// The provisioning state of the HTTP listener resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// Custom error configurations of the HTTP listener.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customErrorConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayCustomError> CustomErrorConfigurations { get; set; }

        /// <summary>
        /// Reference to the FirewallPolicy resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firewallPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource FirewallPolicy { get; set; }

        /// <summary>
        /// List of Host names for HTTP Listener that allows special wildcard characters as well.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hostNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> HostNames { get; set; }

    }

    /// <summary>
    /// Http listener of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayHttpListener : SubResource
    {
        /// <summary>
        /// Properties of the application gateway HTTP listener.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayHttpListenerPropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the HTTP listener that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of listener of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayListenerPropertiesFormat
    {
        /// <summary>
        /// Frontend IP configuration resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendIPConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource FrontendIPConfiguration { get; set; }

        /// <summary>
        /// Frontend port resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource FrontendPort { get; set; }

        /// <summary>
        /// Protocol of the listener.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayProtocol? Protocol { get; set; }

        /// <summary>
        /// SSL certificate resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sslCertificate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource SslCertificate { get; set; }

        /// <summary>
        /// SSL profile resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sslProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource SslProfile { get; set; }

        /// <summary>
        /// The provisioning state of the listener resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// List of Server Name Indications(SNI) for TLS Multi-site Listener that allows special wildcard characters as well.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hostNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> HostNames { get; set; }

    }

    /// <summary>
    /// Listener of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayListener : SubResource
    {
        /// <summary>
        /// Properties of the application gateway listener.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayListenerPropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the listener that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of path rule of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayPathRulePropertiesFormat
    {
        /// <summary>
        /// Path rules of URL path map.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paths", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Paths { get; set; }

        /// <summary>
        /// Backend address pool resource of URL path map path rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddressPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource BackendAddressPool { get; set; }

        /// <summary>
        /// Backend http settings resource of URL path map path rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendHttpSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource BackendHttpSettings { get; set; }

        /// <summary>
        /// Redirect configuration resource of URL path map path rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redirectConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource RedirectConfiguration { get; set; }

        /// <summary>
        /// Rewrite rule set resource of URL path map path rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rewriteRuleSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource RewriteRuleSet { get; set; }

        /// <summary>
        /// Load Distribution Policy resource of URL path map path rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadDistributionPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource LoadDistributionPolicy { get; set; }

        /// <summary>
        /// The provisioning state of the path rule resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// Reference to the FirewallPolicy resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firewallPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource FirewallPolicy { get; set; }

    }

    /// <summary>
    /// Path rule of URL path map of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayPathRule : SubResource
    {
        /// <summary>
        /// Properties of the application gateway path rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayPathRulePropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the path rule that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of probe of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayProbePropertiesFormat
    {
        /// <summary>
        /// The protocol used for the probe.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayProtocol? Protocol { get; set; }

        /// <summary>
        /// Host name to send the probe to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("host", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Host { get; set; }

        /// <summary>
        /// Relative path of probe. Valid path starts from '/'. Probe is sent to &lt;Protocol&gt;://&lt;host&gt;:&lt;port&gt;&lt;path&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// The probing interval in seconds. This is the time interval between two consecutive probes. Acceptable values are from 1 second to 86400 seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Interval { get; set; }

        /// <summary>
        /// The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable values are from 1 second to 86400 seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Timeout { get; set; }

        /// <summary>
        /// The probe retry count. Backend server is marked down after consecutive probe failure count reaches UnhealthyThreshold. Acceptable values are from 1 second to 20.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unhealthyThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UnhealthyThreshold { get; set; }

        /// <summary>
        /// Whether the host header should be picked from the backend http settings. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickHostNameFromBackendHttpSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PickHostNameFromBackendHttpSettings { get; set; }

        /// <summary>
        /// Whether the server name indication should be picked from the backend settings for Tls protocol. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pickHostNameFromBackendSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PickHostNameFromBackendSettings { get; set; }

        /// <summary>
        /// Minimum number of servers that are always marked healthy. Default value is 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minServers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinServers { get; set; }

        /// <summary>
        /// Criterion for classifying a healthy probe response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("match", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayProbeHealthResponseMatch Match { get; set; }

        /// <summary>
        /// The provisioning state of the probe resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// Custom port which will be used for probing the backend servers. The valid value ranges from 1 to 65535. In case not set, port from http settings will be used. This property is valid for Basic, Standard_v2 and WAF_v2 only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int? Port { get; set; }

    }

    /// <summary>
    /// Application gateway probe health response match.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayProbeHealthResponseMatch
    {
        /// <summary>
        /// Body that must be contained in the health response. Default value is empty.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        /// <summary>
        /// Allowed ranges of healthy status codes. Default range of healthy status codes is 200-399.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> StatusCodes { get; set; }

    }

    /// <summary>
    /// Probe of the application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayProbe : SubResource
    {
        /// <summary>
        /// Properties of the application gateway probe.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayProbePropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the probe that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of request routing rule of the application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayRequestRoutingRulePropertiesFormat
    {
        /// <summary>
        /// Rule type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayRequestRoutingRulePropertiesFormatRuleType? RuleType { get; set; }

        /// <summary>
        /// Priority of the request routing rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 20000)]
        public int? Priority { get; set; }

        /// <summary>
        /// Backend address pool resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddressPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource BackendAddressPool { get; set; }

        /// <summary>
        /// Backend http settings resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendHttpSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource BackendHttpSettings { get; set; }

        /// <summary>
        /// Http listener resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpListener", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource HttpListener { get; set; }

        /// <summary>
        /// URL path map resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urlPathMap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource UrlPathMap { get; set; }

        /// <summary>
        /// Rewrite Rule Set resource in Basic rule of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rewriteRuleSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource RewriteRuleSet { get; set; }

        /// <summary>
        /// Redirect configuration resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redirectConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource RedirectConfiguration { get; set; }

        /// <summary>
        /// Load Distribution Policy resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadDistributionPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource LoadDistributionPolicy { get; set; }

        /// <summary>
        /// The provisioning state of the request routing rule resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// Request routing rule of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayRequestRoutingRule : SubResource
    {
        /// <summary>
        /// Properties of the application gateway request routing rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayRequestRoutingRulePropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the request routing rule that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of routing rule of the application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayRoutingRulePropertiesFormat
    {
        /// <summary>
        /// Rule type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayRoutingRulePropertiesFormatRuleType? RuleType { get; set; }

        /// <summary>
        /// Priority of the routing rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 20000)]
        public int Priority { get; set; }

        /// <summary>
        /// Backend address pool resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddressPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource BackendAddressPool { get; set; }

        /// <summary>
        /// Backend settings resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource BackendSettings { get; set; }

        /// <summary>
        /// Listener resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listener", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource Listener { get; set; }

        /// <summary>
        /// The provisioning state of the request routing rule resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// Routing rule of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayRoutingRule : SubResource
    {
        /// <summary>
        /// Properties of the application gateway routing rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayRoutingRulePropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the routing rule that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Rewrite rule set of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayRewriteRuleSet : SubResource
    {
        /// <summary>
        /// Properties of the application gateway rewrite rule set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayRewriteRuleSetPropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the rewrite rule set that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

    }

    /// <summary>
    /// Properties of rewrite rule set of the application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayRewriteRuleSetPropertiesFormat
    {
        /// <summary>
        /// Rewrite rules in the rewrite rule set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rewriteRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayRewriteRule> RewriteRules { get; set; }

        /// <summary>
        /// The provisioning state of the rewrite rule set resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// Rewrite rule of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayRewriteRule
    {
        /// <summary>
        /// Name of the rewrite rule that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Rule Sequence of the rewrite rule that determines the order of execution of a particular rule in a RewriteRuleSet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RuleSequence { get; set; }

        /// <summary>
        /// Conditions based on which the action set execution will be evaluated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayRewriteRuleCondition> Conditions { get; set; }

        /// <summary>
        /// Set of actions to be done as part of the rewrite Rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayRewriteRuleActionSet ActionSet { get; set; }

    }

    /// <summary>
    /// Set of conditions in the Rewrite Rule in Application Gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayRewriteRuleCondition
    {
        /// <summary>
        /// The condition parameter of the RewriteRuleCondition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("variable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Variable { get; set; }

        /// <summary>
        /// The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }

        /// <summary>
        /// Setting this parameter to truth value with force the pattern to do a case in-sensitive comparison.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ignoreCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IgnoreCase { get; set; }

        /// <summary>
        /// Setting this value as truth will force to check the negation of the condition given by the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("negate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Negate { get; set; }

    }

    /// <summary>
    /// Set of actions in the Rewrite Rule in Application Gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayRewriteRuleActionSet
    {
        /// <summary>
        /// Request Header Actions in the Action Set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestHeaderConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayHeaderConfiguration> RequestHeaderConfigurations { get; set; }

        /// <summary>
        /// Response Header Actions in the Action Set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("responseHeaderConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayHeaderConfiguration> ResponseHeaderConfigurations { get; set; }

        /// <summary>
        /// Url Configuration Action in the Action Set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urlConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayUrlConfiguration UrlConfiguration { get; set; }

    }

    /// <summary>
    /// Header configuration of the Actions set in Application Gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayHeaderConfiguration
    {
        /// <summary>
        /// Header name of the header configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("headerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeaderName { get; set; }

        /// <summary>
        /// An optional field under "Rewrite Action". It lets you capture and modify the value(s) of a specific header when multiple headers with the same name exist. Currently supported for Set-Cookie Response header only. For more details, visit https://aka.ms/appgwheadercrud
        /// </summary>
        [Newtonsoft.Json.JsonProperty("headerValueMatcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HeaderValueMatcher HeaderValueMatcher { get; set; }

        /// <summary>
        /// Header value of the header configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("headerValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HeaderValue { get; set; }

    }

    /// <summary>
    /// An optional field under "Rewrite Action". It lets you capture and modify the value(s) of a specific header when multiple headers with the same name exist. Currently supported for Set-Cookie Response header only. For more details, visit https://aka.ms/appgwheadercrud
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HeaderValueMatcher
    {
        /// <summary>
        /// The pattern, either fixed string or regular expression, that evaluates if a header value should be selected for rewrite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pattern { get; set; }

        /// <summary>
        /// Setting this parameter to truth value with force the pattern to do a case in-sensitive comparison.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ignoreCase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IgnoreCase { get; set; }

        /// <summary>
        /// Setting this value as truth will force to check the negation of the condition given by the user in the pattern field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("negate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Negate { get; set; }

    }

    /// <summary>
    /// Url configuration of the Actions set in Application Gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayUrlConfiguration
    {
        /// <summary>
        /// Url path which user has provided for url rewrite. Null means no path will be updated. Default value is null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifiedPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedPath { get; set; }

        /// <summary>
        /// Query string which user has provided for url rewrite. Null means no query string will be updated. Default value is null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifiedQueryString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModifiedQueryString { get; set; }

        /// <summary>
        /// If set as true, it will re-evaluate the url path map provided in path based request routing rules using modified path. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reroute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Reroute { get; set; }

    }

    /// <summary>
    /// Properties of redirect configuration of the application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayRedirectConfigurationPropertiesFormat
    {
        /// <summary>
        /// HTTP redirection type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redirectType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RedirectTypeEnum? RedirectType { get; set; }

        /// <summary>
        /// Reference to a listener to redirect the request to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetListener", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource TargetListener { get; set; }

        /// <summary>
        /// Url to redirect the request to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetUrl { get; set; }

        /// <summary>
        /// Include path in the redirected url.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludePath { get; set; }

        /// <summary>
        /// Include query string in the redirected url.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeQueryString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeQueryString { get; set; }

        /// <summary>
        /// Request routing specifying redirect configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestRoutingRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> RequestRoutingRules { get; set; }

        /// <summary>
        /// Url path maps specifying default redirect configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urlPathMaps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> UrlPathMaps { get; set; }

        /// <summary>
        /// Path rules specifying redirect configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pathRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> PathRules { get; set; }

    }

    /// <summary>
    /// Redirect configuration of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayRedirectConfiguration : SubResource
    {
        /// <summary>
        /// Properties of the application gateway redirect configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayRedirectConfigurationPropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the redirect configuration that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Private Link Configuration on an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayPrivateLinkConfiguration : SubResource
    {
        /// <summary>
        /// Properties of the application gateway private link configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayPrivateLinkConfigurationProperties Properties { get; set; }

        /// <summary>
        /// Name of the private link configuration that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of private link configuration on an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayPrivateLinkConfigurationProperties
    {
        /// <summary>
        /// An array of application gateway private link ip configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayPrivateLinkIpConfiguration> IpConfigurations { get; set; }

        /// <summary>
        /// The provisioning state of the application gateway private link configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// The application gateway private link ip configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayPrivateLinkIpConfiguration : SubResource
    {
        /// <summary>
        /// Properties of an application gateway private link ip configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayPrivateLinkIpConfigurationProperties Properties { get; set; }

        /// <summary>
        /// The name of application gateway private link ip configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// The resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of an application gateway private link IP configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayPrivateLinkIpConfigurationProperties
    {
        /// <summary>
        /// The private IP address of the IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivateIPAddress { get; set; }

        /// <summary>
        /// The private IP address allocation method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAllocationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IPAllocationMethod? PrivateIPAllocationMethod { get; set; }

        /// <summary>
        /// Reference to the subnet resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource Subnet { get; set; }

        /// <summary>
        /// Whether the ip configuration is primary or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        /// <summary>
        /// The provisioning state of the application gateway private link IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// PrivateLink Resource of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayPrivateLinkResource : SubResource
    {
        /// <summary>
        /// Properties of the application gateway private link resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayPrivateLinkResourceProperties Properties { get; set; }

        /// <summary>
        /// Name of the private link resource that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of a private link resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayPrivateLinkResourceProperties
    {
        /// <summary>
        /// Group identifier of private link resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        /// <summary>
        /// Required member names of private link resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requiredMembers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> RequiredMembers { get; set; }

        /// <summary>
        /// Required DNS zone names of the the private link resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requiredZoneNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> RequiredZoneNames { get; set; }

    }

    /// <summary>
    /// Response for ListApplicationGatewayPrivateLinkResources API service call. Gets all private link resources for an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayPrivateLinkResourceListResult
    {
        /// <summary>
        /// List of private link resources of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayPrivateLinkResource> Value { get; set; }

        /// <summary>
        /// URL to get the next set of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// Private Endpoint connection on an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayPrivateEndpointConnection : SubResource
    {
        /// <summary>
        /// Properties of the application gateway private endpoint connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayPrivateEndpointConnectionProperties Properties { get; set; }

        /// <summary>
        /// Name of the private endpoint connection on an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of Private Link Resource of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayPrivateEndpointConnectionProperties
    {
        /// <summary>
        /// The resource of private end point.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateEndpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrivateEndpoint PrivateEndpoint { get; set; }

        /// <summary>
        /// A collection of information about the state of the connection between service consumer and provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateLinkServiceConnectionState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrivateLinkServiceConnectionState PrivateLinkServiceConnectionState { get; set; }

        /// <summary>
        /// The provisioning state of the application gateway private endpoint connection resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// The consumer link id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkIdentifier { get; set; }

    }

    /// <summary>
    /// Response for ListApplicationGatewayPrivateEndpointConnection API service call. Gets all private endpoint connections for an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayPrivateEndpointConnectionListResult
    {
        /// <summary>
        /// List of private endpoint connections on an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayPrivateEndpointConnection> Value { get; set; }

        /// <summary>
        /// URL to get the next set of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// Properties of the application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayPropertiesFormat
    {
        /// <summary>
        /// SKU of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewaySku Sku { get; set; }

        /// <summary>
        /// SSL policy of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sslPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewaySslPolicy SslPolicy { get; set; }

        /// <summary>
        /// Operational state of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationalState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayPropertiesFormatOperationalState? OperationalState { get; set; }

        /// <summary>
        /// Subnets of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gatewayIPConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayIPConfiguration> GatewayIPConfigurations { get; set; }

        /// <summary>
        /// Authentication certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authenticationCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayAuthenticationCertificate> AuthenticationCertificates { get; set; }

        /// <summary>
        /// Trusted Root certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trustedRootCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayTrustedRootCertificate> TrustedRootCertificates { get; set; }

        /// <summary>
        /// Trusted client certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trustedClientCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayTrustedClientCertificate> TrustedClientCertificates { get; set; }

        /// <summary>
        /// SSL certificates of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sslCertificates", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewaySslCertificate> SslCertificates { get; set; }

        /// <summary>
        /// Frontend IP addresses of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendIPConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayFrontendIPConfiguration> FrontendIPConfigurations { get; set; }

        /// <summary>
        /// Frontend ports of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendPorts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayFrontendPort> FrontendPorts { get; set; }

        /// <summary>
        /// Probes of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("probes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayProbe> Probes { get; set; }

        /// <summary>
        /// Backend address pool of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddressPools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayBackendAddressPool> BackendAddressPools { get; set; }

        /// <summary>
        /// Backend http settings of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendHttpSettingsCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayBackendHttpSettings> BackendHttpSettingsCollection { get; set; }

        /// <summary>
        /// Backend settings of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendSettingsCollection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayBackendSettings> BackendSettingsCollection { get; set; }

        /// <summary>
        /// Http listeners of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpListeners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayHttpListener> HttpListeners { get; set; }

        /// <summary>
        /// Listeners of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("listeners", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayListener> Listeners { get; set; }

        /// <summary>
        /// SSL profiles of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sslProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewaySslProfile> SslProfiles { get; set; }

        /// <summary>
        /// URL path map of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urlPathMaps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayUrlPathMap> UrlPathMaps { get; set; }

        /// <summary>
        /// Request routing rules of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestRoutingRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayRequestRoutingRule> RequestRoutingRules { get; set; }

        /// <summary>
        /// Routing rules of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("routingRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayRoutingRule> RoutingRules { get; set; }

        /// <summary>
        /// Rewrite rules for the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rewriteRuleSets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayRewriteRuleSet> RewriteRuleSets { get; set; }

        /// <summary>
        /// Redirect configurations of the application gateway resource. For default limits, see [Application Gateway limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("redirectConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayRedirectConfiguration> RedirectConfigurations { get; set; }

        /// <summary>
        /// Web application firewall configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webApplicationFirewallConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayWebApplicationFirewallConfiguration WebApplicationFirewallConfiguration { get; set; }

        /// <summary>
        /// Reference to the FirewallPolicy resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firewallPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource FirewallPolicy { get; set; }

        /// <summary>
        /// Whether HTTP2 is enabled on the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableHttp2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableHttp2 { get; set; }

        /// <summary>
        /// Whether FIPS is enabled on the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableFips", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableFips { get; set; }

        /// <summary>
        /// Autoscale Configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoscaleConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayAutoscaleConfiguration AutoscaleConfiguration { get; set; }

        /// <summary>
        /// PrivateLink configurations on application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateLinkConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayPrivateLinkConfiguration> PrivateLinkConfigurations { get; set; }

        /// <summary>
        /// Private Endpoint connections on application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateEndpointConnections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayPrivateEndpointConnection> PrivateEndpointConnections { get; set; }

        /// <summary>
        /// The resource GUID property of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceGuid { get; set; }

        /// <summary>
        /// The provisioning state of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// Custom error configurations of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customErrorConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayCustomError> CustomErrorConfigurations { get; set; }

        /// <summary>
        /// If true, associates a firewall policy with an application gateway regardless whether the policy differs from the WAF Config.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forceFirewallPolicyAssociation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ForceFirewallPolicyAssociation { get; set; }

        /// <summary>
        /// Load distribution policies of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadDistributionPolicies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayLoadDistributionPolicy> LoadDistributionPolicies { get; set; }

        /// <summary>
        /// Global Configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("globalConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayGlobalConfiguration GlobalConfiguration { get; set; }

        /// <summary>
        /// The default predefined SSL Policy applied on the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultPredefinedSslPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PolicyNameEnum? DefaultPredefinedSslPolicy { get; set; }

    }

    /// <summary>
    /// Application gateway resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGateway : Resource
    {
        /// <summary>
        /// Properties of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayPropertiesFormat Properties { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// A list of availability zones denoting where the resource needs to come from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Zones { get; set; }

        /// <summary>
        /// The identity of the application gateway, if configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManagedServiceIdentity Identity { get; set; }

    }

    /// <summary>
    /// Response for ListApplicationGateways API service call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayListResult
    {
        /// <summary>
        /// List of an application gateways in a resource group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGateway> Value { get; set; }

        /// <summary>
        /// URL to get the next set of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// Properties of UrlPathMap of the application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayUrlPathMapPropertiesFormat
    {
        /// <summary>
        /// Default backend address pool resource of URL path map.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultBackendAddressPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource DefaultBackendAddressPool { get; set; }

        /// <summary>
        /// Default backend http settings resource of URL path map.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultBackendHttpSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource DefaultBackendHttpSettings { get; set; }

        /// <summary>
        /// Default Rewrite rule set resource of URL path map.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultRewriteRuleSet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource DefaultRewriteRuleSet { get; set; }

        /// <summary>
        /// Default redirect configuration resource of URL path map.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultRedirectConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource DefaultRedirectConfiguration { get; set; }

        /// <summary>
        /// Default Load Distribution Policy resource of URL path map.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultLoadDistributionPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource DefaultLoadDistributionPolicy { get; set; }

        /// <summary>
        /// Path rule of URL path map resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pathRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayPathRule> PathRules { get; set; }

        /// <summary>
        /// The provisioning state of the URL path map resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// UrlPathMaps give a url path to the backend mapping information for PathBasedRouting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayUrlPathMap : SubResource
    {
        /// <summary>
        /// Properties of the application gateway URL path map.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayUrlPathMapPropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the URL path map that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Application gateway web application firewall configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayWebApplicationFirewallConfiguration
    {
        /// <summary>
        /// Whether the web application firewall is enabled or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Web application firewall mode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firewallMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayWebApplicationFirewallConfigurationFirewallMode FirewallMode { get; set; }

        /// <summary>
        /// The type of the web application firewall rule set. Possible values are: 'OWASP'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleSetType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RuleSetType { get; set; }

        /// <summary>
        /// The version of the rule set type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleSetVersion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RuleSetVersion { get; set; }

        /// <summary>
        /// The disabled rule groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabledRuleGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayFirewallDisabledRuleGroup> DisabledRuleGroups { get; set; }

        /// <summary>
        /// Whether allow WAF to check request Body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestBodyCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RequestBodyCheck { get; set; }

        /// <summary>
        /// Maximum request body size for WAF.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxRequestBodySize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(8, 128)]
        public int? MaxRequestBodySize { get; set; }

        /// <summary>
        /// Maximum request body size in Kb for WAF.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxRequestBodySizeInKb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(8, 128)]
        public int? MaxRequestBodySizeInKb { get; set; }

        /// <summary>
        /// Maximum file upload size in Mb for WAF.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileUploadLimitInMb", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int? FileUploadLimitInMb { get; set; }

        /// <summary>
        /// The exclusion list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exclusions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayFirewallExclusion> Exclusions { get; set; }

    }

    /// <summary>
    /// Application Gateway autoscale configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayAutoscaleConfiguration
    {
        /// <summary>
        /// Lower bound on number of Application Gateway capacity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minCapacity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int MinCapacity { get; set; }

        /// <summary>
        /// Upper bound on number of Application Gateway capacity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxCapacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(2, int.MaxValue)]
        public int? MaxCapacity { get; set; }

    }

    /// <summary>
    /// Connection draining allows open connections to a backend server to be active for a specified time after the backend server got removed from the configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayConnectionDraining
    {
        /// <summary>
        /// Whether connection draining is enabled or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled { get; set; }

        /// <summary>
        /// The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("drainTimeoutInSec", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 3600)]
        public int DrainTimeoutInSec { get; set; }

    }

    /// <summary>
    /// Allows to disable rules within a rule group or an entire rule group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayFirewallDisabledRuleGroup
    {
        /// <summary>
        /// The name of the rule group that will be disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleGroupName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RuleGroupName { get; set; }

        /// <summary>
        /// The list of rules that will be disabled. If null, all rules of the rule group will be disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Rules { get; set; }

    }

    /// <summary>
    /// Response for ApplicationGatewayAvailableServerVariables API service call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayAvailableServerVariablesResult : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// Response for ApplicationGatewayAvailableRequestHeaders API service call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayAvailableRequestHeadersResult : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// Response for ApplicationGatewayAvailableResponseHeaders API service call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayAvailableResponseHeadersResult : System.Collections.ObjectModel.Collection<string>
    {

    }

    /// <summary>
    /// Allow to exclude some variable satisfy the condition for the WAF check.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayFirewallExclusion
    {
        /// <summary>
        /// The variable to be excluded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("matchVariable", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MatchVariable { get; set; }

        /// <summary>
        /// When matchVariable is a collection, operate on the selector to specify which elements in the collection this exclusion applies to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("selectorMatchOperator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SelectorMatchOperator { get; set; }

        /// <summary>
        /// When matchVariable is a collection, operator used to specify which elements in the collection this exclusion applies to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("selector", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Selector { get; set; }

    }

    /// <summary>
    /// Response for ApplicationGatewayAvailableWafRuleSets API service call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayAvailableWafRuleSetsResult
    {
        /// <summary>
        /// The list of application gateway rule sets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayFirewallRuleSet> Value { get; set; }

    }

    /// <summary>
    /// A web application firewall rule set.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayFirewallRuleSet : Resource
    {
        /// <summary>
        /// Properties of the application gateway firewall rule set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayFirewallRuleSetPropertiesFormat Properties { get; set; }

    }

    /// <summary>
    /// Properties of the web application firewall rule set.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayFirewallRuleSetPropertiesFormat
    {
        /// <summary>
        /// The provisioning state of the web application firewall rule set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// The type of the web application firewall rule set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleSetType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RuleSetType { get; set; }

        /// <summary>
        /// The version of the web application firewall rule set type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleSetVersion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RuleSetVersion { get; set; }

        /// <summary>
        /// The rule groups of the web application firewall rule set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleGroups", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<ApplicationGatewayFirewallRuleGroup> RuleGroups { get; set; } = new System.Collections.Generic.List<ApplicationGatewayFirewallRuleGroup>();

        /// <summary>
        /// Tier of an application gateway that support the rule set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tiers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<Tiers> Tiers { get; set; }

    }

    /// <summary>
    /// A web application firewall rule group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayFirewallRuleGroup
    {
        /// <summary>
        /// The name of the web application firewall rule group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleGroupName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RuleGroupName { get; set; }

        /// <summary>
        /// The description of the web application firewall rule group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The rules of the web application firewall rule group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<ApplicationGatewayFirewallRule> Rules { get; set; } = new System.Collections.Generic.List<ApplicationGatewayFirewallRule>();

    }

    /// <summary>
    /// A web application firewall rule.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayFirewallRule
    {
        /// <summary>
        /// The identifier of the web application firewall rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleId", Required = Newtonsoft.Json.Required.Always)]
        public int RuleId { get; set; }

        /// <summary>
        /// The string representation of the web application firewall rule identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleIdString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuleIdString { get; set; }

        /// <summary>
        /// The string representation of the web application firewall rule state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayFirewallRuleState? State { get; set; }

        /// <summary>
        /// The string representation of the web application firewall rule action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayFirewallRuleAction? Action { get; set; }

        /// <summary>
        /// The string representation of the web application firewall rule sensitivity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sensitivity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayFirewallRuleSensitivity? Sensitivity { get; set; }

        /// <summary>
        /// The description of the web application firewall rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Response for ApplicationGatewayAvailableSslOptions API service call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayAvailableSslOptions : Resource
    {
        /// <summary>
        /// Properties of the application gateway available SSL options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayAvailableSslOptionsPropertiesFormat Properties { get; set; }

    }

    /// <summary>
    /// Properties of ApplicationGatewayAvailableSslOptions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayAvailableSslOptionsPropertiesFormat
    {
        /// <summary>
        /// List of available Ssl predefined policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("predefinedPolicies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> PredefinedPolicies { get; set; }

        /// <summary>
        /// Name of the Ssl predefined policy applied by default to application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PolicyNameEnum? DefaultPolicy { get; set; }

        /// <summary>
        /// List of available Ssl cipher suites.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableCipherSuites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<CipherSuitesEnum> AvailableCipherSuites { get; set; }

        /// <summary>
        /// List of available Ssl protocols.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableProtocols", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<ProtocolsEnum> AvailableProtocols { get; set; }

    }

    /// <summary>
    /// Response for ApplicationGatewayAvailableSslOptions API service call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayAvailableSslPredefinedPolicies
    {
        /// <summary>
        /// List of available Ssl predefined policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewaySslPredefinedPolicy> Value { get; set; }

        /// <summary>
        /// URL to get the next set of results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// An Ssl predefined policy.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewaySslPredefinedPolicy : SubResource
    {
        /// <summary>
        /// Name of the Ssl predefined policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Properties of the application gateway SSL predefined policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewaySslPredefinedPolicyPropertiesFormat Properties { get; set; }

    }

    /// <summary>
    /// Properties of ApplicationGatewaySslPredefinedPolicy.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewaySslPredefinedPolicyPropertiesFormat
    {
        /// <summary>
        /// Ssl cipher suites to be enabled in the specified order for application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cipherSuites", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<CipherSuitesEnum> CipherSuites { get; set; }

        /// <summary>
        /// Minimum version of Ssl protocol to be supported on application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minProtocolVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProtocolsEnum? MinProtocolVersion { get; set; }

    }

    /// <summary>
    /// Custom error of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayCustomError
    {
        /// <summary>
        /// Status code of the application gateway custom error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayCustomErrorStatusCode? StatusCode { get; set; }

        /// <summary>
        /// Error page URL of the application gateway custom error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customErrorPageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomErrorPageUrl { get; set; }

    }

    /// <summary>
    /// Ssl predefined policy name enums.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PolicyNameEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AppGwSslPolicy20150501")]
        AppGwSslPolicy20150501 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AppGwSslPolicy20170401")]
        AppGwSslPolicy20170401 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AppGwSslPolicy20170401S")]
        AppGwSslPolicy20170401S = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AppGwSslPolicy20220101")]
        AppGwSslPolicy20220101 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AppGwSslPolicy20220101S")]
        AppGwSslPolicy20220101S = 4,

    }

    /// <summary>
    /// Ssl protocol enums.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProtocolsEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TLSv1_0")]
        TLSv1_0 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TLSv1_1")]
        TLSv1_1 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TLSv1_2")]
        TLSv1_2 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TLSv1_3")]
        TLSv1_3 = 3,

    }

    /// <summary>
    /// Ssl cipher suites enums.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CipherSuitesEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384")]
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256")]
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA")]
        TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA")]
        TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_DHE_RSA_WITH_AES_256_GCM_SHA384")]
        TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_DHE_RSA_WITH_AES_128_GCM_SHA256")]
        TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_DHE_RSA_WITH_AES_256_CBC_SHA")]
        TLS_DHE_RSA_WITH_AES_256_CBC_SHA = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_DHE_RSA_WITH_AES_128_CBC_SHA")]
        TLS_DHE_RSA_WITH_AES_128_CBC_SHA = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_RSA_WITH_AES_256_GCM_SHA384")]
        TLS_RSA_WITH_AES_256_GCM_SHA384 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_RSA_WITH_AES_128_GCM_SHA256")]
        TLS_RSA_WITH_AES_128_GCM_SHA256 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_RSA_WITH_AES_256_CBC_SHA256")]
        TLS_RSA_WITH_AES_256_CBC_SHA256 = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_RSA_WITH_AES_128_CBC_SHA256")]
        TLS_RSA_WITH_AES_128_CBC_SHA256 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_RSA_WITH_AES_256_CBC_SHA")]
        TLS_RSA_WITH_AES_256_CBC_SHA = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_RSA_WITH_AES_128_CBC_SHA")]
        TLS_RSA_WITH_AES_128_CBC_SHA = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384")]
        TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256")]
        TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384")]
        TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256")]
        TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA")]
        TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA")]
        TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_DHE_DSS_WITH_AES_256_CBC_SHA256")]
        TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_DHE_DSS_WITH_AES_128_CBC_SHA256")]
        TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_DHE_DSS_WITH_AES_256_CBC_SHA")]
        TLS_DHE_DSS_WITH_AES_256_CBC_SHA = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_DHE_DSS_WITH_AES_128_CBC_SHA")]
        TLS_DHE_DSS_WITH_AES_128_CBC_SHA = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_RSA_WITH_3DES_EDE_CBC_SHA")]
        TLS_RSA_WITH_3DES_EDE_CBC_SHA = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA")]
        TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256")]
        TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384")]
        TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 27,

    }

    /// <summary>
    /// Redirect type enum.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RedirectTypeEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Permanent")]
        Permanent = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Found")]
        Found = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SeeOther")]
        SeeOther = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Temporary")]
        Temporary = 3,

    }

    /// <summary>
    /// Application Gateway protocol.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewayProtocol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Http")]
        Http = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Https")]
        Https = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Tcp")]
        Tcp = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Tls")]
        Tls = 3,

    }

    /// <summary>
    /// Properties of Load Distribution Policy of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayLoadDistributionPolicyPropertiesFormat
    {
        /// <summary>
        /// Load Distribution Targets resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadDistributionTargets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayLoadDistributionTarget> LoadDistributionTargets { get; set; }

        /// <summary>
        /// Load Distribution Targets resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadDistributionAlgorithm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApplicationGatewayLoadDistributionAlgorithmEnum? LoadDistributionAlgorithm { get; set; }

        /// <summary>
        /// The provisioning state of the Load Distribution Policy resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// Load Distribution Policy of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayLoadDistributionPolicy : SubResource
    {
        /// <summary>
        /// Properties of the application gateway load distribution policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayLoadDistributionPolicyPropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the load distribution policy that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayLoadDistributionTargetPropertiesFormat
    {
        /// <summary>
        /// Weight per server. Range between 1 and 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("weightPerServer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 100)]
        public int? WeightPerServer { get; set; }

        /// <summary>
        /// Backend address pool resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddressPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource BackendAddressPool { get; set; }

    }

    /// <summary>
    /// Load Distribution Target of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayLoadDistributionTarget : SubResource
    {
        /// <summary>
        /// Properties of the application gateway load distribution target.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApplicationGatewayLoadDistributionTargetPropertiesFormat Properties { get; set; }

        /// <summary>
        /// Name of the load distribution policy that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Load Distribution Algorithm enums.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewayLoadDistributionAlgorithmEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RoundRobin")]
        RoundRobin = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LeastConnections")]
        LeastConnections = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"IpHash")]
        IpHash = 2,

    }

    /// <summary>
    /// Application Gateway global configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayGlobalConfiguration
    {
        /// <summary>
        /// Enable request buffering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableRequestBuffering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableRequestBuffering { get; set; }

        /// <summary>
        /// Enable response buffering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableResponseBuffering", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableResponseBuffering { get; set; }

    }

    /// <summary>
    /// An error response from the service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudError
    {
        /// <summary>
        /// Cloud error body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error2 Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tags object for patch operations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagsObject
    {
        /// <summary>
        /// Resource tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Common error representation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// Error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Error target.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }

        /// <summary>
        /// Error details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ErrorDetails> Details { get; set; }

        /// <summary>
        /// Inner error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("innerError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InnerError { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Reference to another subresource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SubResource
    {
        /// <summary>
        /// Resource ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Common resource representation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Resource
    {
        /// <summary>
        /// Resource ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Resource name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Resource location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }

        /// <summary>
        /// Resource tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tap configuration in a Network Interface.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetworkInterfaceTapConfiguration : SubResource
    {
        /// <summary>
        /// Properties of the Virtual Network Tap configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Sub Resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// The current provisioning state.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProvisioningState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Updating")]
        Updating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleting")]
        Deleting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 3,

    }

    /// <summary>
    /// IPConfiguration in a network interface.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetworkInterfaceIPConfiguration : SubResource
    {
        /// <summary>
        /// Network interface IP configuration properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties2 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// IP address allocation method.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IPAllocationMethod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Static")]
        Static = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Dynamic")]
        Dynamic = 1,

    }

    /// <summary>
    /// IP address version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IPVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IPv4")]
        IPv4 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IPv6")]
        IPv6 = 1,

    }

    /// <summary>
    /// An application security group in a resource group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationSecurityGroup : Resource
    {
        /// <summary>
        /// Properties of the application security group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties3 Properties { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

    }

    /// <summary>
    /// A network interface in a resource group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetworkInterface : Resource
    {
        /// <summary>
        /// The extended location of the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExtendedLocation ExtendedLocation { get; set; }

        /// <summary>
        /// Properties of the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties4 Properties { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

    }

    /// <summary>
    /// Subnet in a virtual network resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Subnet : SubResource
    {
        /// <summary>
        /// Properties of the subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties5 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Common error details representation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorDetails
    {
        /// <summary>
        /// Error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Error target.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }

        /// <summary>
        /// Error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Access to be allowed or denied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Access
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Allow")]
        Allow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Deny")]
        Deny = 1,

    }

    /// <summary>
    /// Network security rule.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SecurityRule : SubResource
    {
        /// <summary>
        /// Properties of the security rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties6 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Effective network security rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EffectiveNetworkSecurityRule
    {
        /// <summary>
        /// The name of the security rule specified by the user (if created by the user).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The network protocol this rule applies to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EffectiveNetworkSecurityRuleProtocol? Protocol { get; set; }

        /// <summary>
        /// The source port or range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourcePortRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourcePortRange { get; set; }

        /// <summary>
        /// The destination port or range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationPortRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationPortRange { get; set; }

        /// <summary>
        /// The source port ranges. Expected values include a single integer between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourcePortRanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SourcePortRanges { get; set; }

        /// <summary>
        /// The destination port ranges. Expected values include a single integer between 0 and 65535, a range using '-' as separator (e.g. 100-400), or an asterisk (*).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationPortRanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DestinationPortRanges { get; set; }

        /// <summary>
        /// The source address prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceAddressPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceAddressPrefix { get; set; }

        /// <summary>
        /// The destination address prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationAddressPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationAddressPrefix { get; set; }

        /// <summary>
        /// The source address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceAddressPrefixes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SourceAddressPrefixes { get; set; }

        /// <summary>
        /// The destination address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags, and the asterisk (*).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationAddressPrefixes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DestinationAddressPrefixes { get; set; }

        /// <summary>
        /// The expanded source address prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expandedSourceAddressPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ExpandedSourceAddressPrefix { get; set; }

        /// <summary>
        /// Expanded destination address prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expandedDestinationAddressPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ExpandedDestinationAddressPrefix { get; set; }

        /// <summary>
        /// Whether network traffic is allowed or denied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("access", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SecurityRuleAccess? Access { get; set; }

        /// <summary>
        /// The priority of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Priority { get; set; }

        /// <summary>
        /// The direction of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SecurityRuleDirection? Direction { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identity for the resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManagedServiceIdentity
    {
        /// <summary>
        /// The principal id of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("principalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrincipalId { get; set; }

        /// <summary>
        /// The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        /// <summary>
        /// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ManagedServiceIdentityType? Type { get; set; }

        /// <summary>
        /// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userAssignedIdentities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Anonymous> UserAssignedIdentities { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Whether network traffic is allowed or denied.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SecurityRuleAccess
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Allow")]
        Allow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Deny")]
        Deny = 1,

    }

    /// <summary>
    /// Information about a hop between the source and the destination.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConnectivityHop
    {
        /// <summary>
        /// The type of the hop.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// The ID of the hop.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The IP address of the hop.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// The ID of the resource corresponding to this hop.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }

        /// <summary>
        /// List of next hop identifiers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextHopIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> NextHopIds { get; set; }

        /// <summary>
        /// List of previous hop identifiers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previousHopIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> PreviousHopIds { get; set; }

        /// <summary>
        /// List of hop links.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Links> Links { get; set; }

        /// <summary>
        /// List of previous hop links.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previousLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Links> PreviousLinks { get; set; }

        /// <summary>
        /// List of issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Issues> Issues { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A flow log resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlowLog : Resource
    {
        /// <summary>
        /// Properties of the flow log.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties7 Properties { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// FlowLog resource Managed Identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ManagedServiceIdentity Identity { get; set; }

    }

    /// <summary>
    /// NetworkSecurityGroup resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetworkSecurityGroup : Resource
    {
        /// <summary>
        /// Properties of the network security group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties8 Properties { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

    }

    /// <summary>
    /// Route table resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RouteTable : Resource
    {
        /// <summary>
        /// Properties of the route table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties9 Properties { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

    }

    /// <summary>
    /// Service End point policy resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceEndpointPolicy : Resource
    {
        /// <summary>
        /// Properties of the service end point policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties10 Properties { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Kind of service endpoint policy. This is metadata used for the Azure portal experience.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kind", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Kind { get; set; }

    }

    /// <summary>
    /// ExtendedLocation complex type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExtendedLocation
    {
        /// <summary>
        /// The name of the extended location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The type of the extended location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Frontend IP address of the load balancer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FrontendIPConfiguration : SubResource
    {
        /// <summary>
        /// Properties of the load balancer probe.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties11 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within the set of frontend IP configurations used by the load balancer. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// A list of availability zones denoting the IP allocated for the resource needs to come from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Zones { get; set; }

    }

    /// <summary>
    /// Private endpoint resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrivateEndpoint : Resource
    {
        /// <summary>
        /// The extended location of the load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExtendedLocation ExtendedLocation { get; set; }

        /// <summary>
        /// Properties of the private endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties12 Properties { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

    }

    /// <summary>
    /// A collection of information about the state of the connection between service consumer and provider.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrivateLinkServiceConnectionState
    {
        /// <summary>
        /// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>
        /// The reason for approval/rejection of the connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// A message indicating if changes on the service provider require any updates on the consumer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actionsRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActionsRequired { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// IP configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IPConfiguration : SubResource
    {
        /// <summary>
        /// Properties of the IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties13 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

    }

    /// <summary>
    /// IP configuration profile child resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IPConfigurationProfile : SubResource
    {
        /// <summary>
        /// Properties of the IP configuration profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties14 Properties { get; set; }

        /// <summary>
        /// The name of the resource. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Sub Resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

    }

    /// <summary>
    /// IP configuration of an application gateway. Currently 1 public and 1 private IP configuration is allowed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayIPConfiguration2 : SubResource
    {
        /// <summary>
        /// Properties of the application gateway IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties15 Properties { get; set; }

        /// <summary>
        /// Name of the IP configuration that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Nat Gateway resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NatGateway : Resource
    {
        /// <summary>
        /// The nat gateway SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sku Sku { get; set; }

        /// <summary>
        /// Nat Gateway properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties16 Properties { get; set; }

        /// <summary>
        /// A list of availability zones denoting the zone in which Nat Gateway should be deployed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Zones { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

    }

    /// <summary>
    /// Response for GetPublicIpAddressDdosProtectionStatusOperation API service call.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PublicIpDdosProtectionStatusResult
    {
        /// <summary>
        /// Public IP ARM resource ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIpAddressId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicIpAddressId { get; set; }

        /// <summary>
        /// IP Address of the Public IP Resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIpAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicIpAddress { get; set; }

        /// <summary>
        /// Value indicating whether the IP address is DDoS workload protected or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isWorkloadProtected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PublicIpDdosProtectionStatusResultIsWorkloadProtected? IsWorkloadProtected { get; set; }

        /// <summary>
        ///  DDoS protection plan Resource Id of a if IP address is protected through a plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ddosProtectionPlanId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DdosProtectionPlanId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Public IP address resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PublicIPAddress : Resource
    {
        /// <summary>
        /// The extended location of the public ip address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExtendedLocation ExtendedLocation { get; set; }

        /// <summary>
        /// The public IP address SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sku2 Sku { get; set; }

        /// <summary>
        /// Public IP address properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties17 Properties { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// A list of availability zones denoting the IP allocated for the resource needs to come from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zones", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Zones { get; set; }

    }

    /// <summary>
    /// Virtual Network Tap resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VirtualNetworkTap : Resource
    {
        /// <summary>
        /// Virtual Network Tap Properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties18 Properties { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

    }

    /// <summary>
    /// Backend Address Pool of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationGatewayBackendAddressPool2 : SubResource
    {
        /// <summary>
        /// Properties of the application gateway backend address pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties19 Properties { get; set; }

        /// <summary>
        /// Name of the backend address pool that is unique within an Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Pool of backend IP addresses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BackendAddressPool : SubResource
    {
        /// <summary>
        /// Properties of load balancer backend address pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties20 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Inbound NAT rule of the load balancer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundNatRule : SubResource
    {
        /// <summary>
        /// Properties of load balancer inbound NAT rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties21 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Private link service resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrivateLinkService : Resource
    {
        /// <summary>
        /// The extended location of the load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExtendedLocation ExtendedLocation { get; set; }

        /// <summary>
        /// Properties of the private link service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties22 Properties { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

    }

    /// <summary>
    /// LoadBalancer resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoadBalancer : Resource
    {
        /// <summary>
        /// The extended location of the load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExtendedLocation ExtendedLocation { get; set; }

        /// <summary>
        /// The load balancer SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sku3 Sku { get; set; }

        /// <summary>
        /// Properties of load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties23 Properties { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

    }

    /// <summary>
    /// The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SecurityRuleDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Inbound")]
        Inbound = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Outbound")]
        Outbound = 1,

    }

    /// <summary>
    /// The type of Azure hop the packet should be sent to.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RouteNextHopType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualNetworkGateway")]
        VirtualNetworkGateway = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"VnetLocal")]
        VnetLocal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Internet")]
        Internet = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualAppliance")]
        VirtualAppliance = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewayBackendHealthServerHealth
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Up")]
        Up = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Down")]
        Down = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Partial")]
        Partial = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Draining")]
        Draining = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewaySkuName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_Small")]
        Standard_Small = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_Medium")]
        Standard_Medium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_Large")]
        Standard_Large = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"WAF_Medium")]
        WAF_Medium = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"WAF_Large")]
        WAF_Large = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_v2")]
        Standard_v2 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"WAF_v2")]
        WAF_v2 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Basic")]
        Basic = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewaySkuTier
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WAF")]
        WAF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_v2")]
        Standard_v2 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"WAF_v2")]
        WAF_v2 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Basic")]
        Basic = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewaySkuFamily
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Generation_1")]
        Generation_1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Generation_2")]
        Generation_2 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewaySslPolicyPolicyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Predefined")]
        Predefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CustomV2")]
        CustomV2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewayClientAuthConfigurationVerifyClientRevocation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OCSP")]
        OCSP = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewayBackendHttpSettingsPropertiesFormatCookieBasedAffinity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Enabled")]
        Enabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewayRequestRoutingRulePropertiesFormatRuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Basic")]
        Basic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PathBasedRouting")]
        PathBasedRouting = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewayRoutingRulePropertiesFormatRuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Basic")]
        Basic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PathBasedRouting")]
        PathBasedRouting = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewayPropertiesFormatOperationalState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Stopped")]
        Stopped = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Starting")]
        Starting = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Running")]
        Running = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Stopping")]
        Stopping = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewayWebApplicationFirewallConfigurationFirewallMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Detection")]
        Detection = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Prevention")]
        Prevention = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Tiers
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WAF")]
        WAF = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_v2")]
        Standard_v2 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"WAF_v2")]
        WAF_v2 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewayFirewallRuleState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Enabled")]
        Enabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewayFirewallRuleAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AnomalyScoring")]
        AnomalyScoring = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Allow")]
        Allow = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Block")]
        Block = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Log")]
        Log = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewayFirewallRuleSensitivity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Low")]
        Low = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Medium")]
        Medium = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"High")]
        High = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ApplicationGatewayCustomErrorStatusCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"HttpStatus400")]
        HttpStatus400 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HttpStatus403")]
        HttpStatus403 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HttpStatus404")]
        HttpStatus404 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HttpStatus405")]
        HttpStatus405 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HttpStatus408")]
        HttpStatus408 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"HttpStatus500")]
        HttpStatus500 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"HttpStatus502")]
        HttpStatus502 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"HttpStatus503")]
        HttpStatus503 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"HttpStatus504")]
        HttpStatus504 = 8,

    }

    /// <summary>
    /// An error response from the service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error2
    {
        /// <summary>
        /// An identifier for the error. Codes are invariant and are intended to be consumed programmatically.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// A message describing the error, intended to be suitable for display in a user interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// The target of the particular error. For example, the name of the property in error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }

        /// <summary>
        /// A list of additional details about the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Error2> Details { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of Virtual Network Tap configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties
    {
        /// <summary>
        /// The reference to the Virtual Network Tap resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("virtualNetworkTap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VirtualNetworkTap VirtualNetworkTap { get; set; }

        /// <summary>
        /// The provisioning state of the network interface tap configuration resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of IP configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties2
    {
        /// <summary>
        /// The reference to gateway load balancer frontend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gatewayLoadBalancer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource GatewayLoadBalancer { get; set; }

        /// <summary>
        /// The reference to Virtual Network Taps.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("virtualNetworkTaps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<VirtualNetworkTap> VirtualNetworkTaps { get; set; }

        /// <summary>
        /// The reference to ApplicationGatewayBackendAddressPool resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationGatewayBackendAddressPools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayBackendAddressPool2> ApplicationGatewayBackendAddressPools { get; set; }

        /// <summary>
        /// The reference to LoadBalancerBackendAddressPool resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadBalancerBackendAddressPools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BackendAddressPool> LoadBalancerBackendAddressPools { get; set; }

        /// <summary>
        /// A list of references of LoadBalancerInboundNatRules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadBalancerInboundNatRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<InboundNatRule> LoadBalancerInboundNatRules { get; set; }

        /// <summary>
        /// Private IP address of the IP configuration. It can be a single IP address or a CIDR block in the format &lt;address&gt;/&lt;prefix-length&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivateIPAddress { get; set; }

        /// <summary>
        /// The private IP address prefix length. If specified and the allocation method is dynamic, the service will allocate a CIDR block instead of a single IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAddressPrefixLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 128)]
        public int? PrivateIPAddressPrefixLength { get; set; }

        /// <summary>
        /// The private IP address allocation method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAllocationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IPAllocationMethod? PrivateIPAllocationMethod { get; set; }

        /// <summary>
        /// Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAddressVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IPVersion? PrivateIPAddressVersion { get; set; }

        /// <summary>
        /// Subnet bound to the IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Subnet Subnet { get; set; }

        /// <summary>
        /// Whether this is a primary customer address on the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        /// <summary>
        /// Public IP address bound to the IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIPAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PublicIPAddress PublicIPAddress { get; set; }

        /// <summary>
        /// Application security groups in which the IP configuration is included.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationSecurityGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationSecurityGroup> ApplicationSecurityGroups { get; set; }

        /// <summary>
        /// The provisioning state of the network interface IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// PrivateLinkConnection properties for the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateLinkConnectionProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrivateLinkConnectionProperties PrivateLinkConnectionProperties { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Application security group properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties3
    {
        /// <summary>
        /// The resource GUID property of the application security group resource. It uniquely identifies a resource, even if the user changes its name or migrate the resource across subscriptions or resource groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceGuid { get; set; }

        /// <summary>
        /// The provisioning state of the application security group resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// NetworkInterface properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties4
    {
        /// <summary>
        /// The reference to a virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("virtualMachine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource VirtualMachine { get; set; }

        /// <summary>
        /// The reference to the NetworkSecurityGroup resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkSecurityGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkSecurityGroup NetworkSecurityGroup { get; set; }

        /// <summary>
        /// A reference to the private endpoint to which the network interface is linked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateEndpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrivateEndpoint PrivateEndpoint { get; set; }

        /// <summary>
        /// A list of IPConfigurations of the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NetworkInterfaceIPConfiguration> IpConfigurations { get; set; }

        /// <summary>
        /// A list of TapConfigurations of the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tapConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NetworkInterfaceTapConfiguration> TapConfigurations { get; set; }

        /// <summary>
        /// The DNS settings in network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dnsSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DnsSettings DnsSettings { get; set; }

        /// <summary>
        /// The MAC address of the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("macAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MacAddress { get; set; }

        /// <summary>
        /// Whether this is a primary network interface on a virtual machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        /// <summary>
        /// Whether the virtual machine this nic is attached to supports encryption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("vnetEncryptionSupported", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VnetEncryptionSupported { get; set; }

        /// <summary>
        /// Whether default outbound connectivity for nic was configured or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultOutboundConnectivityEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultOutboundConnectivityEnabled { get; set; }

        /// <summary>
        /// If the network interface is configured for accelerated networking. Not applicable to VM sizes which require accelerated networking.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableAcceleratedNetworking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableAcceleratedNetworking { get; set; }

        /// <summary>
        /// Indicates whether to disable tcp state tracking.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disableTcpStateTracking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisableTcpStateTracking { get; set; }

        /// <summary>
        /// Indicates whether IP forwarding is enabled on this network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableIPForwarding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableIPForwarding { get; set; }

        /// <summary>
        /// A list of references to linked BareMetal resources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hostedWorkloads", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> HostedWorkloads { get; set; }

        /// <summary>
        /// A reference to the dscp configuration to which the network interface is linked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dscpConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource DscpConfiguration { get; set; }

        /// <summary>
        /// The resource GUID property of the network interface resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceGuid { get; set; }

        /// <summary>
        /// The provisioning state of the network interface resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// WorkloadType of the NetworkInterface for BareMetal resources
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workloadType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkloadType { get; set; }

        /// <summary>
        /// Type of Network Interface resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nicType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties4NicType? NicType { get; set; }

        /// <summary>
        /// Privatelinkservice of the network interface resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateLinkService", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrivateLinkService PrivateLinkService { get; set; }

        /// <summary>
        /// Migration phase of Network Interface resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("migrationPhase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties4MigrationPhase? MigrationPhase { get; set; }

        /// <summary>
        /// Auxiliary mode of Network Interface resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auxiliaryMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties4AuxiliaryMode? AuxiliaryMode { get; set; }

        /// <summary>
        /// Auxiliary sku of Network Interface resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auxiliarySku", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties4AuxiliarySku? AuxiliarySku { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of the subnet.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties5
    {
        /// <summary>
        /// The address prefix for the subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressPrefix { get; set; }

        /// <summary>
        /// List of address prefixes for the subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressPrefixes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AddressPrefixes { get; set; }

        /// <summary>
        /// The reference to the NetworkSecurityGroup resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkSecurityGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkSecurityGroup NetworkSecurityGroup { get; set; }

        /// <summary>
        /// The reference to the RouteTable resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("routeTable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RouteTable RouteTable { get; set; }

        /// <summary>
        /// Nat gateway associated with this subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("natGateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource NatGateway { get; set; }

        /// <summary>
        /// An array of service endpoints.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceEndpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ServiceEndpoints> ServiceEndpoints { get; set; }

        /// <summary>
        /// An array of service endpoint policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceEndpointPolicies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ServiceEndpointPolicy> ServiceEndpointPolicies { get; set; }

        /// <summary>
        /// An array of references to private endpoints.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateEndpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PrivateEndpoint> PrivateEndpoints { get; set; }

        /// <summary>
        /// An array of references to the network interface IP configurations using subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<IPConfiguration> IpConfigurations { get; set; }

        /// <summary>
        /// Array of IP configuration profiles which reference this subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipConfigurationProfiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<IPConfigurationProfile> IpConfigurationProfiles { get; set; }

        /// <summary>
        /// Array of IpAllocation which reference this subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipAllocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> IpAllocations { get; set; }

        /// <summary>
        /// An array of references to the external resources using subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceNavigationLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ResourceNavigationLinks> ResourceNavigationLinks { get; set; }

        /// <summary>
        /// An array of references to services injecting into this subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceAssociationLinks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ServiceAssociationLinks> ServiceAssociationLinks { get; set; }

        /// <summary>
        /// An array of references to the delegations on the subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("delegations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Delegations> Delegations { get; set; }

        /// <summary>
        /// A read-only string identifying the intention of use for this subnet based on delegations and other user-defined properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Purpose { get; set; }

        /// <summary>
        /// The provisioning state of the subnet resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// Enable or Disable apply network policies on private end point in the subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateEndpointNetworkPolicies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties5PrivateEndpointNetworkPolicies? PrivateEndpointNetworkPolicies { get; set; } = ApplicationGatewayController.Properties5PrivateEndpointNetworkPolicies.Disabled;

        /// <summary>
        /// Enable or Disable apply network policies on private link service in the subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateLinkServiceNetworkPolicies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties5PrivateLinkServiceNetworkPolicies? PrivateLinkServiceNetworkPolicies { get; set; } = ApplicationGatewayController.Properties5PrivateLinkServiceNetworkPolicies.Enabled;

        /// <summary>
        /// Application gateway IP configurations of virtual network resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationGatewayIPConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationGatewayIPConfiguration2> ApplicationGatewayIPConfigurations { get; set; }

        /// <summary>
        /// Set this property to Tenant to allow sharing subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if subnet is empty.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharingScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties5SharingScope? SharingScope { get; set; }

        /// <summary>
        /// Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultOutboundAccess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DefaultOutboundAccess { get; set; }

        /// <summary>
        /// A list of IPAM Pools for allocating IP address prefixes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipamPoolPrefixAllocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<IpamPoolPrefixAllocations> IpamPoolPrefixAllocations { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Security rule resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties6
    {
        /// <summary>
        /// A description for this rule. Restricted to 140 chars.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Network protocol this rule applies to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties6Protocol Protocol { get; set; }

        /// <summary>
        /// The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourcePortRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourcePortRange { get; set; }

        /// <summary>
        /// The destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationPortRange", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationPortRange { get; set; }

        /// <summary>
        /// The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceAddressPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceAddressPrefix { get; set; }

        /// <summary>
        /// The CIDR or source IP ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceAddressPrefixes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SourceAddressPrefixes { get; set; }

        /// <summary>
        /// The application security group specified as source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceApplicationSecurityGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationSecurityGroup> SourceApplicationSecurityGroups { get; set; }

        /// <summary>
        /// The destination address prefix. CIDR or destination IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationAddressPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationAddressPrefix { get; set; }

        /// <summary>
        /// The destination address prefixes. CIDR or destination IP ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationAddressPrefixes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DestinationAddressPrefixes { get; set; }

        /// <summary>
        /// The application security group specified as destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationApplicationSecurityGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationSecurityGroup> DestinationApplicationSecurityGroups { get; set; }

        /// <summary>
        /// The source port ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourcePortRanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> SourcePortRanges { get; set; }

        /// <summary>
        /// The destination port ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationPortRanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DestinationPortRanges { get; set; }

        /// <summary>
        /// The network traffic is allowed or denied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("access", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SecurityRuleAccess Access { get; set; }

        /// <summary>
        /// The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }

        /// <summary>
        /// The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SecurityRuleDirection Direction { get; set; }

        /// <summary>
        /// The provisioning state of the security rule resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EffectiveNetworkSecurityRuleProtocol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Tcp")]
        Tcp = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Udp")]
        Udp = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ManagedServiceIdentityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SystemAssigned")]
        SystemAssigned = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UserAssigned")]
        UserAssigned = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SystemAssigned, UserAssigned")]
        SystemAssigned__UserAssigned = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {
        /// <summary>
        /// The principal id of user assigned identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("principalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrincipalId { get; set; }

        /// <summary>
        /// The client id of user assigned identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Hop link.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Links
    {
        /// <summary>
        /// The ID of the next hop.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextHopId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHopId { get; set; }

        /// <summary>
        /// Link type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkType { get; set; }

        /// <summary>
        /// Hop link properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties24 Properties { get; set; }

        /// <summary>
        /// List of issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Issues> Issues { get; set; }

        /// <summary>
        /// Provides additional context on links.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Context { get; set; }

        /// <summary>
        /// Resource ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information about an issue encountered in the process of checking for connectivity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Issues
    {
        /// <summary>
        /// The origin of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("origin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IssuesOrigin? Origin { get; set; }

        /// <summary>
        /// The severity of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("severity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IssuesSeverity? Severity { get; set; }

        /// <summary>
        /// The type of issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IssuesType? Type { get; set; }

        /// <summary>
        /// Provides additional context on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Context> Context { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters that define the configuration of flow log.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties7
    {
        /// <summary>
        /// ID of network security group to which flow log will be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetResourceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TargetResourceId { get; set; }

        /// <summary>
        /// Guid of network security group to which flow log will be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetResourceGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetResourceGuid { get; set; }

        /// <summary>
        /// ID of the storage account which is used to store the flow log.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storageId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StorageId { get; set; }

        /// <summary>
        /// Optional field to filter network traffic logs based on SrcIP, SrcPort, DstIP, DstPort, Protocol, Encryption, Direction and Action. If not specified, all network traffic will be logged.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabledFilteringCriteria", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnabledFilteringCriteria { get; set; }

        /// <summary>
        /// Flag to enable/disable flow logging.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Parameters that define the retention policy for flow log.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("retentionPolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RetentionPolicy RetentionPolicy { get; set; }

        /// <summary>
        /// Parameters that define the flow log format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Format Format { get; set; }

        /// <summary>
        /// Parameters that define the configuration of traffic analytics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flowAnalyticsConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FlowAnalyticsConfiguration FlowAnalyticsConfiguration { get; set; }

        /// <summary>
        /// The provisioning state of the flow log.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Network Security Group resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties8
    {
        /// <summary>
        /// When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flushConnection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FlushConnection { get; set; }

        /// <summary>
        /// A collection of security rules of the network security group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("securityRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SecurityRule> SecurityRules { get; set; }

        /// <summary>
        /// The default security rules of network security group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultSecurityRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SecurityRule> DefaultSecurityRules { get; set; }

        /// <summary>
        /// A collection of references to network interfaces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkInterfaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NetworkInterface> NetworkInterfaces { get; set; }

        /// <summary>
        /// A collection of references to subnets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Subnet> Subnets { get; set; }

        /// <summary>
        /// A collection of references to flow log resources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("flowLogs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FlowLog> FlowLogs { get; set; }

        /// <summary>
        /// The resource GUID property of the network security group resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceGuid { get; set; }

        /// <summary>
        /// The provisioning state of the network security group resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Route Table resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties9
    {
        /// <summary>
        /// Collection of routes contained within a route table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("routes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Routes> Routes { get; set; }

        /// <summary>
        /// A collection of references to subnets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Subnet> Subnets { get; set; }

        /// <summary>
        /// Whether to disable the routes learned by BGP on that route table. True means disable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disableBgpRoutePropagation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisableBgpRoutePropagation { get; set; }

        /// <summary>
        /// The provisioning state of the route table resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// The resource GUID property of the route table.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceGuid { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Service Endpoint Policy resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties10
    {
        /// <summary>
        /// A collection of service endpoint policy definitions of the service endpoint policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceEndpointPolicyDefinitions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ServiceEndpointPolicyDefinitions> ServiceEndpointPolicyDefinitions { get; set; }

        /// <summary>
        /// A collection of references to subnets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Subnet> Subnets { get; set; }

        /// <summary>
        /// The resource GUID property of the service endpoint policy resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceGuid { get; set; }

        /// <summary>
        /// The provisioning state of the service endpoint policy resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// The alias indicating if the policy belongs to a service
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceAlias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceAlias { get; set; }

        /// <summary>
        /// A collection of contextual service endpoint policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextualServiceEndpointPolicies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ContextualServiceEndpointPolicies { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The supported ExtendedLocation types. Currently only EdgeZone is supported in Microsoft.Network resources.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EdgeZone")]
        EdgeZone = 0,

    }

    /// <summary>
    /// Properties of Frontend IP Configuration of the load balancer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties11
    {
        /// <summary>
        /// An array of references to inbound rules that use this frontend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inboundNatRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> InboundNatRules { get; set; }

        /// <summary>
        /// An array of references to inbound pools that use this frontend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inboundNatPools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> InboundNatPools { get; set; }

        /// <summary>
        /// An array of references to outbound rules that use this frontend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outboundRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> OutboundRules { get; set; }

        /// <summary>
        /// An array of references to load balancing rules that use this frontend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadBalancingRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> LoadBalancingRules { get; set; }

        /// <summary>
        /// The private IP address of the IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivateIPAddress { get; set; }

        /// <summary>
        /// The Private IP allocation method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAllocationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IPAllocationMethod? PrivateIPAllocationMethod { get; set; }

        /// <summary>
        /// Whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAddressVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IPVersion? PrivateIPAddressVersion { get; set; }

        /// <summary>
        /// The reference to the subnet resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Subnet Subnet { get; set; }

        /// <summary>
        /// The reference to the Public IP resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIPAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PublicIPAddress PublicIPAddress { get; set; }

        /// <summary>
        /// The reference to the Public IP Prefix resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIPPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource PublicIPPrefix { get; set; }

        /// <summary>
        /// The reference to gateway load balancer frontend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gatewayLoadBalancer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource GatewayLoadBalancer { get; set; }

        /// <summary>
        /// The provisioning state of the frontend IP configuration resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of the private endpoint.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties12
    {
        /// <summary>
        /// The ID of the subnet from which the private IP will be allocated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Subnet Subnet { get; set; }

        /// <summary>
        /// An array of references to the network interfaces created for this private endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkInterfaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NetworkInterface> NetworkInterfaces { get; set; }

        /// <summary>
        /// The provisioning state of the private endpoint resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// A grouping of information about the connection to the remote resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateLinkServiceConnections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PrivateLinkServiceConnections> PrivateLinkServiceConnections { get; set; }

        /// <summary>
        /// A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("manualPrivateLinkServiceConnections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PrivateLinkServiceConnections> ManualPrivateLinkServiceConnections { get; set; }

        /// <summary>
        /// An array of custom dns configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customDnsConfigs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<CustomDnsConfigs> CustomDnsConfigs { get; set; }

        /// <summary>
        /// Application security groups in which the private endpoint IP configuration is included.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationSecurityGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ApplicationSecurityGroup> ApplicationSecurityGroups { get; set; }

        /// <summary>
        /// A list of IP configurations of the private endpoint. This will be used to map to the First Party Service's endpoints.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<IpConfigurations> IpConfigurations { get; set; }

        /// <summary>
        /// The custom name of the network interface attached to the private endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customNetworkInterfaceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomNetworkInterfaceName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of IP configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties13
    {
        /// <summary>
        /// The private IP address of the IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivateIPAddress { get; set; }

        /// <summary>
        /// The private IP address allocation method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAllocationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IPAllocationMethod? PrivateIPAllocationMethod { get; set; } = ApplicationGatewayController.IPAllocationMethod.Dynamic;

        /// <summary>
        /// The reference to the subnet resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Subnet Subnet { get; set; }

        /// <summary>
        /// The reference to the public IP resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIPAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PublicIPAddress PublicIPAddress { get; set; }

        /// <summary>
        /// The provisioning state of the IP configuration resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// IP configuration profile properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties14
    {
        /// <summary>
        /// The reference to the subnet resource to create a container network interface ip configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Subnet Subnet { get; set; }

        /// <summary>
        /// The provisioning state of the IP configuration profile resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of IP configuration of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties15
    {
        /// <summary>
        /// Reference to the subnet resource. A subnet from where application gateway gets its private address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource Subnet { get; set; }

        /// <summary>
        /// The provisioning state of the application gateway IP configuration resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// SKU of nat gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sku
    {
        /// <summary>
        /// Name of Nat Gateway SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SkuName? Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Nat Gateway properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties16
    {
        /// <summary>
        /// The idle timeout of the nat gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idleTimeoutInMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdleTimeoutInMinutes { get; set; }

        /// <summary>
        /// An array of public ip addresses associated with the nat gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIpAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> PublicIpAddresses { get; set; }

        /// <summary>
        /// An array of public ip prefixes associated with the nat gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIpPrefixes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> PublicIpPrefixes { get; set; }

        /// <summary>
        /// An array of references to the subnets using this nat gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> Subnets { get; set; }

        /// <summary>
        /// The resource GUID property of the NAT gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceGuid { get; set; }

        /// <summary>
        /// The provisioning state of the NAT gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PublicIpDdosProtectionStatusResultIsWorkloadProtected
    {

        [System.Runtime.Serialization.EnumMember(Value = @"False")]
        False = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"True")]
        True = 1,

    }

    /// <summary>
    /// SKU of a public IP address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sku2
    {
        /// <summary>
        /// Name of a public IP address SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Sku2Name? Name { get; set; }

        /// <summary>
        /// Tier of a public IP address SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Sku2Tier? Tier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Public IP address properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties17
    {
        /// <summary>
        /// The public IP address allocation method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIPAllocationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IPAllocationMethod? PublicIPAllocationMethod { get; set; }

        /// <summary>
        /// The public IP address version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIPAddressVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IPVersion? PublicIPAddressVersion { get; set; }

        /// <summary>
        /// The IP configuration associated with the public IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IPConfiguration IpConfiguration { get; set; }

        /// <summary>
        /// The FQDN of the DNS record associated with the public IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dnsSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DnsSettings2 DnsSettings { get; set; }

        /// <summary>
        /// The DDoS protection custom policy associated with the public IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ddosSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DdosSettings DdosSettings { get; set; }

        /// <summary>
        /// The list of tags associated with the public IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipTags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<IpTags> IpTags { get; set; }

        /// <summary>
        /// The IP address associated with the public IP address resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IpAddress { get; set; }

        /// <summary>
        /// The Public IP Prefix this Public IP Address should be allocated from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicIPPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource PublicIPPrefix { get; set; }

        /// <summary>
        /// The idle timeout of the public IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idleTimeoutInMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdleTimeoutInMinutes { get; set; }

        /// <summary>
        /// The resource GUID property of the public IP address resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceGuid { get; set; }

        /// <summary>
        /// The provisioning state of the public IP address resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// The service public IP address of the public IP address resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("servicePublicIPAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PublicIPAddress ServicePublicIPAddress { get; set; }

        /// <summary>
        /// The NatGateway for the Public IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("natGateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NatGateway NatGateway { get; set; }

        /// <summary>
        /// Migration phase of Public IP Address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("migrationPhase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties17MigrationPhase? MigrationPhase { get; set; }

        /// <summary>
        /// The linked public IP address of the public IP address resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkedPublicIPAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PublicIPAddress LinkedPublicIPAddress { get; set; }

        /// <summary>
        /// Specify what happens to the public IP address when the VM using it is deleted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deleteOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties17DeleteOption? DeleteOption { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Virtual Network Tap properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties18
    {
        /// <summary>
        /// Specifies the list of resource IDs for the network interface IP configuration that needs to be tapped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkInterfaceTapConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NetworkInterfaceTapConfiguration> NetworkInterfaceTapConfigurations { get; set; }

        /// <summary>
        /// The resource GUID property of the virtual network tap resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceGuid { get; set; }

        /// <summary>
        /// The provisioning state of the virtual network tap resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// The reference to the private IP Address of the collector nic that will receive the tap.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationNetworkInterfaceIPConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkInterfaceIPConfiguration DestinationNetworkInterfaceIPConfiguration { get; set; }

        /// <summary>
        /// The reference to the private IP address on the internal Load Balancer that will receive the tap.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationLoadBalancerFrontEndIPConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FrontendIPConfiguration DestinationLoadBalancerFrontEndIPConfiguration { get; set; }

        /// <summary>
        /// The VXLAN destination port that will receive the tapped traffic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DestinationPort { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of Backend Address Pool of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties19
    {
        /// <summary>
        /// Collection of references to IPs defined in network interfaces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendIPConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NetworkInterfaceIPConfiguration> BackendIPConfigurations { get; set; }

        /// <summary>
        /// Backend addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BackendAddresses> BackendAddresses { get; set; }

        /// <summary>
        /// The provisioning state of the backend address pool resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of the backend address pool.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties20
    {
        /// <summary>
        /// The location of the backend address pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }

        /// <summary>
        /// An array of gateway load balancer tunnel interfaces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tunnelInterfaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TunnelInterfaces> TunnelInterfaces { get; set; }

        /// <summary>
        /// An array of backend addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadBalancerBackendAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LoadBalancerBackendAddresses> LoadBalancerBackendAddresses { get; set; }

        /// <summary>
        /// An array of references to IP addresses defined in network interfaces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendIPConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NetworkInterfaceIPConfiguration> BackendIPConfigurations { get; set; }

        /// <summary>
        /// An array of references to load balancing rules that use this backend address pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadBalancingRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> LoadBalancingRules { get; set; }

        /// <summary>
        /// A reference to an outbound rule that uses this backend address pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outboundRule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource OutboundRule { get; set; }

        /// <summary>
        /// An array of references to outbound rules that use this backend address pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outboundRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> OutboundRules { get; set; }

        /// <summary>
        /// An array of references to inbound NAT rules that use this backend address pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inboundNatRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> InboundNatRules { get; set; }

        /// <summary>
        /// The provisioning state of the backend address pool resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// Amount of seconds Load Balancer waits for before sending RESET to client and backend address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("drainPeriodInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DrainPeriodInSeconds { get; set; }

        /// <summary>
        /// A reference to a virtual network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("virtualNetwork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource VirtualNetwork { get; set; }

        /// <summary>
        /// Backend address synchronous mode for the backend pool
        /// </summary>
        [Newtonsoft.Json.JsonProperty("syncMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties20SyncMode? SyncMode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of the inbound NAT rule.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties21
    {
        /// <summary>
        /// A reference to frontend IP addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendIPConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource FrontendIPConfiguration { get; set; }

        /// <summary>
        /// A reference to a private IP address defined on a network interface of a VM. Traffic sent to the frontend port of each of the frontend IP configurations is forwarded to the backend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendIPConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkInterfaceIPConfiguration BackendIPConfiguration { get; set; }

        /// <summary>
        /// The reference to the transport protocol used by the load balancing rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Protocol? Protocol { get; set; }

        /// <summary>
        /// The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FrontendPort { get; set; }

        /// <summary>
        /// The port used for the internal endpoint. Acceptable values range from 1 to 65535.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BackendPort { get; set; }

        /// <summary>
        /// The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idleTimeoutInMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdleTimeoutInMinutes { get; set; }

        /// <summary>
        /// Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableFloatingIP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableFloatingIP { get; set; }

        /// <summary>
        /// Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableTcpReset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableTcpReset { get; set; }

        /// <summary>
        /// The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendPortRangeStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FrontendPortRangeStart { get; set; }

        /// <summary>
        /// The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendPortRangeEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FrontendPortRangeEnd { get; set; }

        /// <summary>
        /// A reference to backendAddressPool resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddressPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource BackendAddressPool { get; set; }

        /// <summary>
        /// The provisioning state of the inbound NAT rule resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of the private link service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties22
    {
        /// <summary>
        /// An array of references to the load balancer IP configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadBalancerFrontendIpConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FrontendIPConfiguration> LoadBalancerFrontendIpConfigurations { get; set; }

        /// <summary>
        /// An array of private link service IP configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ipConfigurations> IpConfigurations { get; set; }

        /// <summary>
        /// The destination IP address of the private link service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("destinationIPAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DestinationIPAddress { get; set; }

        /// <summary>
        /// An array of references to the network interfaces created for this private link service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkInterfaces", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<NetworkInterface> NetworkInterfaces { get; set; }

        /// <summary>
        /// The provisioning state of the private link service resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// An array of list about connections to the private endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateEndpointConnections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PrivateEndpointConnections> PrivateEndpointConnections { get; set; }

        /// <summary>
        /// The visibility list of the private link service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Visibility Visibility { get; set; }

        /// <summary>
        /// The auto-approval list of the private link service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoApproval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Visibility AutoApproval { get; set; }

        /// <summary>
        /// The list of Fqdn.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fqdns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Fqdns { get; set; }

        /// <summary>
        /// The alias of the private link service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }

        /// <summary>
        /// Whether the private link service is enabled for proxy protocol or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableProxyProtocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableProxyProtocol { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// SKU of a load balancer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Sku3
    {
        /// <summary>
        /// Name of a load balancer SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Sku3Name? Name { get; set; }

        /// <summary>
        /// Tier of a load balancer SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Sku3Tier? Tier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of the load balancer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties23
    {
        /// <summary>
        /// Object representing the frontend IPs to be used for the load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendIPConfigurations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<FrontendIPConfiguration> FrontendIPConfigurations { get; set; }

        /// <summary>
        /// Collection of backend address pools used by a load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddressPools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BackendAddressPool> BackendAddressPools { get; set; }

        /// <summary>
        /// Object collection representing the load balancing rules Gets the provisioning.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadBalancingRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<LoadBalancingRules> LoadBalancingRules { get; set; }

        /// <summary>
        /// Collection of probe objects used in the load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("probes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Probes> Probes { get; set; }

        /// <summary>
        /// Collection of inbound NAT Rules used by a load balancer. Defining inbound NAT rules on your load balancer is mutually exclusive with defining an inbound NAT pool. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an Inbound NAT pool. They have to reference individual inbound NAT rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inboundNatRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<InboundNatRule> InboundNatRules { get; set; }

        /// <summary>
        /// Defines an external port range for inbound NAT to a single backend port on NICs associated with a load balancer. Inbound NAT rules are created automatically for each NIC associated with the Load Balancer using an external port from this range. Defining an Inbound NAT pool on your Load Balancer is mutually exclusive with defining inbound NAT rules. Inbound NAT pools are referenced from virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an inbound NAT pool. They have to reference individual inbound NAT rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inboundNatPools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<InboundNatPools> InboundNatPools { get; set; }

        /// <summary>
        /// The outbound rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outboundRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<OutboundRules> OutboundRules { get; set; }

        /// <summary>
        /// The resource GUID property of the load balancer resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceGuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceGuid { get; set; }

        /// <summary>
        /// The provisioning state of the load balancer resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// PrivateLinkConnection properties for the network interface.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrivateLinkConnectionProperties
    {
        /// <summary>
        /// The group ID for current private link connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        /// <summary>
        /// The required member name for current private link connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requiredMemberName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequiredMemberName { get; set; }

        /// <summary>
        /// List of FQDNs for current private link connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fqdns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Fqdns { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// DNS settings of a network interface.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DnsSettings
    {
        /// <summary>
        /// List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dnsServers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DnsServers { get; set; }

        /// <summary>
        /// If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers from all NICs that are part of the Availability Set. This property is what is configured on each of those VMs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appliedDnsServers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AppliedDnsServers { get; set; }

        /// <summary>
        /// Relative DNS name for this NIC used for internal communications between VMs in the same virtual network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalDnsNameLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalDnsNameLabel { get; set; }

        /// <summary>
        /// Fully qualified DNS name supporting internal communications between VMs in the same virtual network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalFqdn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalFqdn { get; set; }

        /// <summary>
        /// Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of the VM. This DNS name can be constructed by concatenating the VM name with the value of internalDomainNameSuffix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("internalDomainNameSuffix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InternalDomainNameSuffix { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties4NicType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Elastic")]
        Elastic = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties4MigrationPhase
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Prepare")]
        Prepare = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Commit")]
        Commit = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Abort")]
        Abort = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Committed")]
        Committed = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties4AuxiliaryMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MaxConnections")]
        MaxConnections = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Floating")]
        Floating = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AcceleratedConnections")]
        AcceleratedConnections = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties4AuxiliarySku
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"A1")]
        A1 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"A2")]
        A2 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"A4")]
        A4 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"A8")]
        A8 = 4,

    }

    /// <summary>
    /// The service endpoint properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceEndpoints
    {
        /// <summary>
        /// The type of the endpoint service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service { get; set; }

        /// <summary>
        /// SubResource as network identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource NetworkIdentifier { get; set; }

        /// <summary>
        /// A list of locations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Locations { get; set; }

        /// <summary>
        /// The provisioning state of the service endpoint resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// ResourceNavigationLink resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceNavigationLinks : SubResource
    {
        /// <summary>
        /// Resource navigation link properties format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties25 Properties { get; set; }

        /// <summary>
        /// Name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Resource navigation link identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// ServiceAssociationLink resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceAssociationLinks : SubResource
    {
        /// <summary>
        /// Resource navigation link properties format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties26 Properties { get; set; }

        /// <summary>
        /// Name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Details the service to which the subnet is delegated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Delegations : SubResource
    {
        /// <summary>
        /// Properties of the subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties27 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within a subnet. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties5PrivateEndpointNetworkPolicies
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Enabled")]
        Enabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NetworkSecurityGroupEnabled")]
        NetworkSecurityGroupEnabled = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"RouteTableEnabled")]
        RouteTableEnabled = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties5PrivateLinkServiceNetworkPolicies
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Enabled")]
        Enabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties5SharingScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Tenant")]
        Tenant = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DelegatedServices")]
        DelegatedServices = 1,

    }

    /// <summary>
    /// IpamPool prefix allocation reference.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IpamPoolPrefixAllocations
    {
        [Newtonsoft.Json.JsonProperty("pool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pool Pool { get; set; }

        /// <summary>
        /// Number of IP addresses to allocate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfIpAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberOfIpAddresses { get; set; }

        /// <summary>
        /// List of assigned IP address prefixes in the IpamPool of the associated resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allocatedAddressPrefixes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> AllocatedAddressPrefixes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties6Protocol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Tcp")]
        Tcp = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Udp")]
        Udp = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Icmp")]
        Icmp = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Esp")]
        Esp = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"*")]
        _ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Ah")]
        Ah = 5,

    }

    /// <summary>
    /// Hop link properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties24
    {
        /// <summary>
        /// Minimum roundtrip time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roundTripTimeMin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 4294967295D)]
        public long? RoundTripTimeMin { get; set; }

        /// <summary>
        /// Average roundtrip time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roundTripTimeAvg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 4294967295D)]
        public long? RoundTripTimeAvg { get; set; }

        /// <summary>
        /// Maximum roundtrip time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roundTripTimeMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 4294967295D)]
        public long? RoundTripTimeMax { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IssuesOrigin
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Local")]
        Local = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Inbound")]
        Inbound = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Outbound")]
        Outbound = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IssuesSeverity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IssuesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AgentStopped")]
        AgentStopped = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"GuestFirewall")]
        GuestFirewall = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DnsResolution")]
        DnsResolution = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"SocketBind")]
        SocketBind = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"NetworkSecurityRule")]
        NetworkSecurityRule = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"UserDefinedRoute")]
        UserDefinedRoute = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"PortThrottled")]
        PortThrottled = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Platform")]
        Platform = 8,

    }

    /// <summary>
    /// A key-value pair that provides additional context on the issue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Context : System.Collections.Generic.Dictionary<string, string>
    {

    }

    /// <summary>
    /// Parameters that define the retention policy for flow log.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RetentionPolicy
    {
        /// <summary>
        /// Number of days to retain flow log records.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("days", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Days { get; set; } = 0;

        /// <summary>
        /// Flag to enable/disable retention.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters that define the flow log format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Format
    {
        /// <summary>
        /// The file type of flow log.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FormatType? Type { get; set; }

        /// <summary>
        /// The version (revision) of the flow log.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Version { get; set; } = 0;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Parameters that define the configuration of traffic analytics.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlowAnalyticsConfiguration
    {
        /// <summary>
        /// Parameters that define the configuration of traffic analytics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkWatcherFlowAnalyticsConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkWatcherFlowAnalyticsConfiguration NetworkWatcherFlowAnalyticsConfiguration { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Route resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Routes : SubResource
    {
        /// <summary>
        /// Properties of the route.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties28 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Service Endpoint policy definitions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServiceEndpointPolicyDefinitions : SubResource
    {
        /// <summary>
        /// Properties of the service endpoint policy definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties29 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// PrivateLinkServiceConnection resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrivateLinkServiceConnections : SubResource
    {
        /// <summary>
        /// Properties of the private link service connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties30 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

    }

    /// <summary>
    /// Contains custom Dns resolution configuration from customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomDnsConfigs
    {
        /// <summary>
        /// Fqdn that resolves to private endpoint ip address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fqdn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fqdn { get; set; }

        /// <summary>
        /// A list of private ip addresses of the private endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipAddresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> IpAddresses { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// An IP Configuration of the private endpoint.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IpConfigurations
    {
        /// <summary>
        /// Properties of private endpoint IP configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties31 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within a resource group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SkuName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Sku2Name
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Basic")]
        Basic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Sku2Tier
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Regional")]
        Regional = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Global")]
        Global = 1,

    }

    /// <summary>
    /// Contains FQDN of the DNS record associated with the public IP address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DnsSettings2
    {
        /// <summary>
        /// The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domainNameLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DomainNameLabel { get; set; }

        /// <summary>
        /// The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domainNameLabelScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DnsSettings2DomainNameLabelScope? DomainNameLabelScope { get; set; }

        /// <summary>
        /// The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fqdn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fqdn { get; set; }

        /// <summary>
        /// The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reverseFqdn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReverseFqdn { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains the DDoS protection settings of the public IP.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DdosSettings
    {
        /// <summary>
        /// The DDoS protection mode of the public IP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protectionMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DdosSettingsProtectionMode? ProtectionMode { get; set; }

        /// <summary>
        /// The DDoS protection plan associated with the public IP. Can only be set if ProtectionMode is Enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ddosProtectionPlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource DdosProtectionPlan { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains the IpTag associated with the object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IpTags
    {
        /// <summary>
        /// The IP tag type. Example: FirstPartyUsage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipTagType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IpTagType { get; set; }

        /// <summary>
        /// The value of the IP tag associated with the public IP. Example: SQL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties17MigrationPhase
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Prepare")]
        Prepare = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Commit")]
        Commit = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Abort")]
        Abort = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Committed")]
        Committed = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties17DeleteOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Delete")]
        Delete = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Detach")]
        Detach = 1,

    }

    /// <summary>
    /// Backend address of an application gateway.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BackendAddresses
    {
        /// <summary>
        /// Fully qualified domain name (FQDN).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fqdn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fqdn { get; set; }

        /// <summary>
        /// IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IpAddress { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Gateway load balancer tunnel interface of a load balancer backend address pool.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TunnelInterfaces
    {
        /// <summary>
        /// Port of gateway load balancer tunnel interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Port { get; set; }

        /// <summary>
        /// Identifier of gateway load balancer tunnel interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Identifier { get; set; }

        /// <summary>
        /// Protocol of gateway load balancer tunnel interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TunnelInterfacesProtocol? Protocol { get; set; }

        /// <summary>
        /// Traffic type of gateway load balancer tunnel interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TunnelInterfacesType? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Load balancer backend addresses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoadBalancerBackendAddresses
    {
        /// <summary>
        /// Properties of load balancer backend address pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties32 Properties { get; set; }

        /// <summary>
        /// Name of the backend address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties20SyncMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Automatic")]
        Automatic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 1,

    }

    /// <summary>
    /// The transport protocol for the endpoint.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Protocol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Udp")]
        Udp = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Tcp")]
        Tcp = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 2,

    }

    /// <summary>
    /// The private link service ip configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ipConfigurations : SubResource
    {
        /// <summary>
        /// Properties of the private link service ip configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties33 Properties { get; set; }

        /// <summary>
        /// The name of private link service ip configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// The resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// PrivateEndpointConnection resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrivateEndpointConnections : SubResource
    {
        /// <summary>
        /// Properties of the private end point connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties34 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within a resource group. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

    }

    /// <summary>
    /// The base resource set for visibility and auto-approval.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Visibility
    {
        /// <summary>
        /// The list of subscriptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscriptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Subscriptions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Sku3Name
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Basic")]
        Basic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard")]
        Standard = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Gateway")]
        Gateway = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Sku3Tier
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Regional")]
        Regional = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Global")]
        Global = 1,

    }

    /// <summary>
    /// A load balancing rule for a load balancer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoadBalancingRules : SubResource
    {
        /// <summary>
        /// Properties of load balancer load balancing rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties35 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within the set of load balancing rules used by the load balancer. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// A load balancer probe.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Probes : SubResource
    {
        /// <summary>
        /// Properties of load balancer probe.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties36 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within the set of probes used by the load balancer. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Inbound NAT pool of the load balancer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundNatPools : SubResource
    {
        /// <summary>
        /// Properties of load balancer inbound nat pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties37 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within the set of inbound NAT pools used by the load balancer. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Outbound rule of the load balancer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OutboundRules : SubResource
    {
        /// <summary>
        /// Properties of load balancer outbound rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Properties38 Properties { get; set; }

        /// <summary>
        /// The name of the resource that is unique within the set of outbound rules used by the load balancer. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("etag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Etag { get; set; }

        /// <summary>
        /// Type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

    }

    /// <summary>
    /// Properties of ResourceNavigationLink.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties25
    {
        /// <summary>
        /// Resource type of the linked resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkedResourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkedResourceType { get; set; }

        /// <summary>
        /// Link to the external resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Link { get; set; }

        /// <summary>
        /// The provisioning state of the resource navigation link resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of ServiceAssociationLink.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties26
    {
        /// <summary>
        /// Resource type of the linked resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkedResourceType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkedResourceType { get; set; }

        /// <summary>
        /// Link to the external resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Link { get; set; }

        /// <summary>
        /// The provisioning state of the service association link resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// If true, the resource can be deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowDelete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowDelete { get; set; }

        /// <summary>
        /// A list of locations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Locations { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of a service delegation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties27
    {
        /// <summary>
        /// The name of the service to whom the subnet should be delegated (e.g. Microsoft.Sql/servers).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceName { get; set; }

        /// <summary>
        /// The actions permitted to the service upon delegation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Actions { get; set; }

        /// <summary>
        /// The provisioning state of the service delegation resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Pool
    {
        /// <summary>
        /// Resource id of the associated Azure IpamPool resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FormatType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"JSON")]
        JSON = 0,

    }

    /// <summary>
    /// Parameters that define the configuration of traffic analytics.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NetworkWatcherFlowAnalyticsConfiguration
    {
        /// <summary>
        /// Flag to enable/disable traffic analytics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enabled { get; set; }

        /// <summary>
        /// The resource guid of the attached workspace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workspaceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkspaceId { get; set; }

        /// <summary>
        /// The location of the attached workspace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workspaceRegion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkspaceRegion { get; set; }

        /// <summary>
        /// Resource Id of the attached workspace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workspaceResourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkspaceResourceId { get; set; }

        /// <summary>
        /// The interval in minutes which would decide how frequently TA service should do flow analytics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trafficAnalyticsInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TrafficAnalyticsInterval { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Route resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties28
    {
        /// <summary>
        /// The destination CIDR to which the route applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddressPrefix { get; set; }

        /// <summary>
        /// The type of Azure hop the packet should be sent to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextHopType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RouteNextHopType NextHopType { get; set; }

        /// <summary>
        /// The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextHopIpAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextHopIpAddress { get; set; }

        /// <summary>
        /// The provisioning state of the route resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// A value indicating whether this route overrides overlapping BGP routes regardless of LPM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasBgpOverride", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasBgpOverride { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Service Endpoint policy definition resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties29
    {
        /// <summary>
        /// A description for this rule. Restricted to 140 chars.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Service endpoint name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("service", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Service { get; set; }

        /// <summary>
        /// A list of service resources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceResources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ServiceResources { get; set; }

        /// <summary>
        /// The provisioning state of the service endpoint policy definition resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of the PrivateLinkServiceConnection.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties30
    {
        /// <summary>
        /// The provisioning state of the private link service connection resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// The resource id of private link service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateLinkServiceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivateLinkServiceId { get; set; }

        /// <summary>
        /// The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> GroupIds { get; set; }

        /// <summary>
        /// A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestMessage { get; set; }

        /// <summary>
        /// A collection of read-only information about the state of the connection to the remote resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateLinkServiceConnectionState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrivateLinkServiceConnectionState PrivateLinkServiceConnectionState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of an IP Configuration of the private endpoint.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties31
    {
        /// <summary>
        /// The ID of a group obtained from the remote resource that this private endpoint should connect to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        /// <summary>
        /// The member name of a group obtained from the remote resource that this private endpoint should connect to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("memberName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MemberName { get; set; }

        /// <summary>
        /// A private ip address obtained from the private endpoint's subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivateIPAddress { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DnsSettings2DomainNameLabelScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TenantReuse")]
        TenantReuse = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SubscriptionReuse")]
        SubscriptionReuse = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ResourceGroupReuse")]
        ResourceGroupReuse = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NoReuse")]
        NoReuse = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DdosSettingsProtectionMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VirtualNetworkInherited")]
        VirtualNetworkInherited = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Enabled")]
        Enabled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TunnelInterfacesProtocol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Native")]
        Native = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"VXLAN")]
        VXLAN = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TunnelInterfacesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Internal")]
        Internal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"External")]
        External = 2,

    }

    /// <summary>
    /// Properties of the load balancer backend addresses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties32
    {
        /// <summary>
        /// Reference to an existing virtual network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("virtualNetwork", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource VirtualNetwork { get; set; }

        /// <summary>
        /// Reference to an existing subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource Subnet { get; set; }

        /// <summary>
        /// IP Address belonging to the referenced virtual network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ipAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IpAddress { get; set; }

        /// <summary>
        /// Reference to IP address defined in network interfaces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("networkInterfaceIPConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource NetworkInterfaceIPConfiguration { get; set; }

        /// <summary>
        /// Reference to the frontend ip address configuration defined in regional loadbalancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadBalancerFrontendIPConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource LoadBalancerFrontendIPConfiguration { get; set; }

        /// <summary>
        /// Collection of inbound NAT rule port mappings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inboundNatRulesPortMapping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<InboundNatRulesPortMapping> InboundNatRulesPortMapping { get; set; }

        /// <summary>
        /// A list of administrative states which once set can override health probe so that Load Balancer will always forward new connections to backend, or deny new connections and reset existing connections.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adminState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties32AdminState? AdminState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of private link service IP configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties33
    {
        /// <summary>
        /// The private IP address of the IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivateIPAddress { get; set; }

        /// <summary>
        /// The private IP address allocation method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAllocationMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IPAllocationMethod? PrivateIPAllocationMethod { get; set; }

        /// <summary>
        /// The reference to the subnet resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subnet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Subnet Subnet { get; set; }

        /// <summary>
        /// Whether the ip configuration is primary or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Primary { get; set; }

        /// <summary>
        /// The provisioning state of the private link service IP configuration resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateIPAddressVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IPVersion? PrivateIPAddressVersion { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of the PrivateEndpointConnectProperties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties34
    {
        /// <summary>
        /// The resource of private end point.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateEndpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrivateEndpoint PrivateEndpoint { get; set; }

        /// <summary>
        /// A collection of information about the state of the connection between service consumer and provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateLinkServiceConnectionState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrivateLinkServiceConnectionState PrivateLinkServiceConnectionState { get; set; }

        /// <summary>
        /// The provisioning state of the private endpoint connection resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// The consumer link id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkIdentifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkIdentifier { get; set; }

        /// <summary>
        /// The location of the private endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privateEndpointLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivateEndpointLocation { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of the load balancer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties35
    {
        /// <summary>
        /// A reference to frontend IP addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendIPConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource FrontendIPConfiguration { get; set; }

        /// <summary>
        /// A reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the backend IPs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddressPool", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource BackendAddressPool { get; set; }

        /// <summary>
        /// An array of references to pool of DIPs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddressPools", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> BackendAddressPools { get; set; }

        /// <summary>
        /// The reference to the load balancer probe used by the load balancing rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("probe", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource Probe { get; set; }

        /// <summary>
        /// The reference to the transport protocol used by the load balancing rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Protocol Protocol { get; set; }

        /// <summary>
        /// The load distribution policy for this rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadDistribution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties35LoadDistribution? LoadDistribution { get; set; }

        /// <summary>
        /// The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values are between 0 and 65534. Note that value 0 enables "Any Port".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendPort", Required = Newtonsoft.Json.Required.Always)]
        public int FrontendPort { get; set; }

        /// <summary>
        /// The port used for internal connections on the endpoint. Acceptable values are between 0 and 65535. Note that value 0 enables "Any Port".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BackendPort { get; set; }

        /// <summary>
        /// The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idleTimeoutInMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdleTimeoutInMinutes { get; set; }

        /// <summary>
        /// Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableFloatingIP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableFloatingIP { get; set; }

        /// <summary>
        /// Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableTcpReset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableTcpReset { get; set; }

        /// <summary>
        /// Configures SNAT for the VMs in the backend pool to use the publicIP address specified in the frontend of the load balancing rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disableOutboundSnat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DisableOutboundSnat { get; set; }

        /// <summary>
        /// The provisioning state of the load balancing rule resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Load balancer probe resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties36
    {
        /// <summary>
        /// The load balancer rules that use this probe.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loadBalancingRules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SubResource> LoadBalancingRules { get; set; }

        /// <summary>
        /// The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful. If 'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required for the probe to be successful.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties36Protocol Protocol { get; set; }

        /// <summary>
        /// The port for communicating the probe. Possible values range from 1 to 65535, inclusive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Always)]
        public int Port { get; set; }

        /// <summary>
        /// The interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("intervalInSeconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IntervalInSeconds { get; set; }

        /// <summary>
        /// Determines how new connections are handled by the load balancer when all backend instances are probed down.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noHealthyBackendsBehavior", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties36NoHealthyBackendsBehavior? NoHealthyBackendsBehavior { get; set; }

        /// <summary>
        /// The number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfProbes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfProbes { get; set; }

        /// <summary>
        /// The number of consecutive successful or failed probes in order to allow or deny traffic from being delivered to this endpoint. After failing the number of consecutive probes equal to this value, the endpoint will be taken out of rotation and require the same number of successful consecutive probes to be placed back in rotation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("probeThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProbeThreshold { get; set; }

        /// <summary>
        /// The URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestPath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestPath { get; set; }

        /// <summary>
        /// The provisioning state of the probe resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Properties of Inbound NAT pool.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties37
    {
        /// <summary>
        /// A reference to frontend IP addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendIPConfiguration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubResource FrontendIPConfiguration { get; set; }

        /// <summary>
        /// The reference to the transport protocol used by the inbound NAT pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Protocol Protocol { get; set; }

        /// <summary>
        /// The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65534.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendPortRangeStart", Required = Newtonsoft.Json.Required.Always)]
        public int FrontendPortRangeStart { get; set; }

        /// <summary>
        /// The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated with a load balancer. Acceptable values range between 1 and 65535.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendPortRangeEnd", Required = Newtonsoft.Json.Required.Always)]
        public int FrontendPortRangeEnd { get; set; }

        /// <summary>
        /// The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendPort", Required = Newtonsoft.Json.Required.Always)]
        public int BackendPort { get; set; }

        /// <summary>
        /// The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to TCP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idleTimeoutInMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdleTimeoutInMinutes { get; set; }

        /// <summary>
        /// Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableFloatingIP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableFloatingIP { get; set; }

        /// <summary>
        /// Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableTcpReset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableTcpReset { get; set; }

        /// <summary>
        /// The provisioning state of the inbound NAT pool resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Outbound rule of the load balancer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties38
    {
        /// <summary>
        /// The number of outbound ports to be used for NAT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allocatedOutboundPorts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AllocatedOutboundPorts { get; set; }

        /// <summary>
        /// The Frontend IP addresses of the load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendIPConfigurations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<SubResource> FrontendIPConfigurations { get; set; } = new System.Collections.Generic.List<SubResource>();

        /// <summary>
        /// A reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the backend IPs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendAddressPool", Required = Newtonsoft.Json.Required.Always)]
        public SubResource BackendAddressPool { get; set; }

        /// <summary>
        /// The provisioning state of the outbound rule resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// The protocol for the outbound rule in load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Properties38Protocol Protocol { get; set; }

        /// <summary>
        /// Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableTcpReset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableTcpReset { get; set; }

        /// <summary>
        /// The timeout for the TCP idle connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idleTimeoutInMinutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? IdleTimeoutInMinutes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Individual port mappings for inbound NAT rule created for backend pool.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboundNatRulesPortMapping
    {
        /// <summary>
        /// Name of inbound NAT rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inboundNatRuleName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InboundNatRuleName { get; set; }

        /// <summary>
        /// Frontend port.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("frontendPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FrontendPort { get; set; }

        /// <summary>
        /// Backend port.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backendPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BackendPort { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties32AdminState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Up")]
        Up = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Down")]
        Down = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties35LoadDistribution
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SourceIP")]
        SourceIP = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SourceIPProtocol")]
        SourceIPProtocol = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties36Protocol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Http")]
        Http = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Tcp")]
        Tcp = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Https")]
        Https = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties36NoHealthyBackendsBehavior
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AllProbedDown")]
        AllProbedDown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AllProbedUp")]
        AllProbedUp = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Properties38Protocol
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Tcp")]
        Tcp = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Udp")]
        Udp = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 2,

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625