//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace GalleryController
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IGalleriesController
    {

        /// <remarks>
        /// Create or update a Shared Image Gallery.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery. The allowed characters are alphabets and numbers with dots and periods allowed in the middle. The maximum length is 80 characters.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="gallery">Parameters supplied to the create or update Shared Image Gallery operation.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Gallery> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string api_version, Gallery gallery);

        /// <remarks>
        /// Update a Shared Image Gallery.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery. The allowed characters are alphabets and numbers with dots and periods allowed in the middle. The maximum length is 80 characters.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="gallery">Parameters supplied to the update Shared Image Gallery operation.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Gallery> UpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string api_version, GalleryUpdate gallery);

        /// <remarks>
        /// Retrieves information about a Shared Image Gallery.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="select">The select expression to apply on the operation.</param>

        /// <param name="expand">The expand query option to apply on the operation.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Gallery> GetAsync(string subscriptionId, string resourceGroupName, string galleryName, string api_version, _select? select, _expand? expand);

        /// <remarks>
        /// Delete a Shared Image Gallery.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery to be deleted.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task DeleteAsync(string subscriptionId, string resourceGroupName, string galleryName, string api_version);

        /// <remarks>
        /// List galleries under a resource group.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryList> ListByResourceGroupAsync(string subscriptionId, string resourceGroupName, string api_version);

        /// <remarks>
        /// List galleries under a subscription.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryList> ListAsync(string subscriptionId, string api_version);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class GalleriesController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IGalleriesController _implementation;

        public GalleriesController(IGalleriesController implementation)
        {
            _implementation = implementation;
        }

        /// <remarks>
        /// Create or update a Shared Image Gallery.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery. The allowed characters are alphabets and numbers with dots and periods allowed in the middle. The maximum length is 80 characters.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="gallery">Parameters supplied to the create or update Shared Image Gallery operation.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}")]
        public System.Threading.Tasks.Task<Gallery> CreateOrUpdate(string subscriptionId, string resourceGroupName, string galleryName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromBody] Gallery gallery)
        {

            return _implementation.CreateOrUpdateAsync(subscriptionId, resourceGroupName, galleryName, api_version, gallery);
        }

        /// <remarks>
        /// Update a Shared Image Gallery.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery. The allowed characters are alphabets and numbers with dots and periods allowed in the middle. The maximum length is 80 characters.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="gallery">Parameters supplied to the update Shared Image Gallery operation.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}")]
        public System.Threading.Tasks.Task<Gallery> Update(string subscriptionId, string resourceGroupName, string galleryName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromBody] GalleryUpdate gallery)
        {

            return _implementation.UpdateAsync(subscriptionId, resourceGroupName, galleryName, api_version, gallery);
        }

        /// <remarks>
        /// Retrieves information about a Shared Image Gallery.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="select">The select expression to apply on the operation.</param>
        /// <param name="expand">The expand query option to apply on the operation.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}")]
        public System.Threading.Tasks.Task<Gallery> Get(string subscriptionId, string resourceGroupName, string galleryName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "$select")] _select? select, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "$expand")] _expand? expand)
        {

            return _implementation.GetAsync(subscriptionId, resourceGroupName, galleryName, api_version, select, expand);
        }

        /// <remarks>
        /// Delete a Shared Image Gallery.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery to be deleted.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}")]
        public System.Threading.Tasks.Task Delete(string subscriptionId, string resourceGroupName, string galleryName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.DeleteAsync(subscriptionId, resourceGroupName, galleryName, api_version);
        }

        /// <remarks>
        /// List galleries under a resource group.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries")]
        public System.Threading.Tasks.Task<GalleryList> ListByResourceGroup(string subscriptionId, string resourceGroupName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.ListByResourceGroupAsync(subscriptionId, resourceGroupName, api_version);
        }

        /// <remarks>
        /// List galleries under a subscription.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/providers/Microsoft.Compute/galleries")]
        public System.Threading.Tasks.Task<GalleryList> List(string subscriptionId, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.ListAsync(subscriptionId, api_version);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IGalleryImagesController
    {

        /// <remarks>
        /// Create or update a gallery image definition.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition is to be created.</param>

        /// <param name="galleryImageName">The name of the gallery image definition to be created or updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="galleryImage">Parameters supplied to the create or update gallery image operation.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryImage> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string api_version, GalleryImage galleryImage);

        /// <remarks>
        /// Update a gallery image definition.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition is to be updated.</param>

        /// <param name="galleryImageName">The name of the gallery image definition to be updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="galleryImage">Parameters supplied to the update gallery image operation.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryImage> UpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string api_version, GalleryImageUpdate galleryImage);

        /// <remarks>
        /// Retrieves information about a gallery image definition.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery from which the Image Definitions are to be retrieved.</param>

        /// <param name="galleryImageName">The name of the gallery image definition to be retrieved.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryImage> GetAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string api_version);

        /// <remarks>
        /// Delete a gallery image.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition is to be deleted.</param>

        /// <param name="galleryImageName">The name of the gallery image definition to be deleted.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task DeleteAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string api_version);

        /// <remarks>
        /// List gallery image definitions in a gallery.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery from which Image Definitions are to be listed.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryImageList> ListByGalleryAsync(string subscriptionId, string resourceGroupName, string galleryName, string api_version);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class GalleryImagesController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IGalleryImagesController _implementation;

        public GalleryImagesController(IGalleryImagesController implementation)
        {
            _implementation = implementation;
        }

        /// <remarks>
        /// Create or update a gallery image definition.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition is to be created.</param>
        /// <param name="galleryImageName">The name of the gallery image definition to be created or updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="galleryImage">Parameters supplied to the create or update gallery image operation.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}")]
        public System.Threading.Tasks.Task<GalleryImage> CreateOrUpdate(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromBody] GalleryImage galleryImage)
        {

            return _implementation.CreateOrUpdateAsync(subscriptionId, resourceGroupName, galleryName, galleryImageName, api_version, galleryImage);
        }

        /// <remarks>
        /// Update a gallery image definition.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition is to be updated.</param>
        /// <param name="galleryImageName">The name of the gallery image definition to be updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="galleryImage">Parameters supplied to the update gallery image operation.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}")]
        public System.Threading.Tasks.Task<GalleryImage> Update(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromBody] GalleryImageUpdate galleryImage)
        {

            return _implementation.UpdateAsync(subscriptionId, resourceGroupName, galleryName, galleryImageName, api_version, galleryImage);
        }

        /// <remarks>
        /// Retrieves information about a gallery image definition.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery from which the Image Definitions are to be retrieved.</param>
        /// <param name="galleryImageName">The name of the gallery image definition to be retrieved.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}")]
        public System.Threading.Tasks.Task<GalleryImage> Get(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetAsync(subscriptionId, resourceGroupName, galleryName, galleryImageName, api_version);
        }

        /// <remarks>
        /// Delete a gallery image.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition is to be deleted.</param>
        /// <param name="galleryImageName">The name of the gallery image definition to be deleted.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}")]
        public System.Threading.Tasks.Task Delete(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.DeleteAsync(subscriptionId, resourceGroupName, galleryName, galleryImageName, api_version);
        }

        /// <remarks>
        /// List gallery image definitions in a gallery.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery from which Image Definitions are to be listed.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images")]
        public System.Threading.Tasks.Task<GalleryImageList> ListByGallery(string subscriptionId, string resourceGroupName, string galleryName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.ListByGalleryAsync(subscriptionId, resourceGroupName, galleryName, api_version);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IGalleryImageVersionsController
    {

        /// <remarks>
        /// Create or update a gallery image version.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition resides.</param>

        /// <param name="galleryImageName">The name of the gallery image definition in which the Image Version is to be created.</param>

        /// <param name="galleryImageVersionName">The name of the gallery image version to be created. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="galleryImageVersion">Parameters supplied to the create or update gallery image version operation.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryImageVersion> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string galleryImageVersionName, string api_version, GalleryImageVersion galleryImageVersion);

        /// <remarks>
        /// Update a gallery image version.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition resides.</param>

        /// <param name="galleryImageName">The name of the gallery image definition in which the Image Version is to be updated.</param>

        /// <param name="galleryImageVersionName">The name of the gallery image version to be updated. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="galleryImageVersion">Parameters supplied to the update gallery image version operation.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryImageVersion> UpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string galleryImageVersionName, string api_version, GalleryImageVersionUpdate galleryImageVersion);

        /// <remarks>
        /// Retrieves information about a gallery image version.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition resides.</param>

        /// <param name="galleryImageName">The name of the gallery image definition in which the Image Version resides.</param>

        /// <param name="galleryImageVersionName">The name of the gallery image version to be retrieved.</param>

        /// <param name="expand">The expand expression to apply on the operation.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryImageVersion> GetAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string galleryImageVersionName, _expand? expand, string api_version);

        /// <remarks>
        /// Delete a gallery image version.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition resides.</param>

        /// <param name="galleryImageName">The name of the gallery image definition in which the Image Version resides.</param>

        /// <param name="galleryImageVersionName">The name of the gallery image version to be deleted.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task DeleteAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string galleryImageVersionName, string api_version);

        /// <remarks>
        /// List gallery image versions in a gallery image definition.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition resides.</param>

        /// <param name="galleryImageName">The name of the Shared Image Gallery Image Definition from which the Image Versions are to be listed.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryImageVersionList> ListByGalleryImageAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string api_version);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class GalleryImageVersionsController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IGalleryImageVersionsController _implementation;

        public GalleryImageVersionsController(IGalleryImageVersionsController implementation)
        {
            _implementation = implementation;
        }

        /// <remarks>
        /// Create or update a gallery image version.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition resides.</param>
        /// <param name="galleryImageName">The name of the gallery image definition in which the Image Version is to be created.</param>
        /// <param name="galleryImageVersionName">The name of the gallery image version to be created. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="galleryImageVersion">Parameters supplied to the create or update gallery image version operation.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions/{galleryImageVersionName}")]
        public System.Threading.Tasks.Task<GalleryImageVersion> CreateOrUpdate(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string galleryImageVersionName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromBody] GalleryImageVersion galleryImageVersion)
        {

            return _implementation.CreateOrUpdateAsync(subscriptionId, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, api_version, galleryImageVersion);
        }

        /// <remarks>
        /// Update a gallery image version.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition resides.</param>
        /// <param name="galleryImageName">The name of the gallery image definition in which the Image Version is to be updated.</param>
        /// <param name="galleryImageVersionName">The name of the gallery image version to be updated. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="galleryImageVersion">Parameters supplied to the update gallery image version operation.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions/{galleryImageVersionName}")]
        public System.Threading.Tasks.Task<GalleryImageVersion> Update(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string galleryImageVersionName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromBody] GalleryImageVersionUpdate galleryImageVersion)
        {

            return _implementation.UpdateAsync(subscriptionId, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, api_version, galleryImageVersion);
        }

        /// <remarks>
        /// Retrieves information about a gallery image version.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition resides.</param>
        /// <param name="galleryImageName">The name of the gallery image definition in which the Image Version resides.</param>
        /// <param name="galleryImageVersionName">The name of the gallery image version to be retrieved.</param>
        /// <param name="expand">The expand expression to apply on the operation.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions/{galleryImageVersionName}")]
        public System.Threading.Tasks.Task<GalleryImageVersion> Get(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string galleryImageVersionName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "$expand")] _expand? expand, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetAsync(subscriptionId, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, expand, api_version);
        }

        /// <remarks>
        /// Delete a gallery image version.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition resides.</param>
        /// <param name="galleryImageName">The name of the gallery image definition in which the Image Version resides.</param>
        /// <param name="galleryImageVersionName">The name of the gallery image version to be deleted.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions/{galleryImageVersionName}")]
        public System.Threading.Tasks.Task Delete(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, string galleryImageVersionName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.DeleteAsync(subscriptionId, resourceGroupName, galleryName, galleryImageName, galleryImageVersionName, api_version);
        }

        /// <remarks>
        /// List gallery image versions in a gallery image definition.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery in which the Image Definition resides.</param>
        /// <param name="galleryImageName">The name of the Shared Image Gallery Image Definition from which the Image Versions are to be listed.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{galleryImageName}/versions")]
        public System.Threading.Tasks.Task<GalleryImageVersionList> ListByGalleryImage(string subscriptionId, string resourceGroupName, string galleryName, string galleryImageName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.ListByGalleryImageAsync(subscriptionId, resourceGroupName, galleryName, galleryImageName, api_version);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IGalleryApplicationsController
    {

        /// <remarks>
        /// Create or update a gallery Application Definition.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition is to be created.</param>

        /// <param name="galleryApplicationName">The name of the gallery Application Definition to be created or updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="galleryApplication">Parameters supplied to the create or update gallery Application operation.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryApplication> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string api_version, GalleryApplication galleryApplication);

        /// <remarks>
        /// Update a gallery Application Definition.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition is to be updated.</param>

        /// <param name="galleryApplicationName">The name of the gallery Application Definition to be updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="galleryApplication">Parameters supplied to the update gallery Application operation.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryApplication> UpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string api_version, GalleryApplicationUpdate galleryApplication);

        /// <remarks>
        /// Retrieves information about a gallery Application Definition.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Application Gallery from which the Application Definitions are to be retrieved.</param>

        /// <param name="galleryApplicationName">The name of the gallery Application Definition to be retrieved.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryApplication> GetAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string api_version);

        /// <remarks>
        /// Delete a gallery Application.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition is to be deleted.</param>

        /// <param name="galleryApplicationName">The name of the gallery Application Definition to be deleted.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task DeleteAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string api_version);

        /// <remarks>
        /// List gallery Application Definitions in a gallery.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Application Gallery from which Application Definitions are to be listed.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryApplicationList> ListByGalleryAsync(string subscriptionId, string resourceGroupName, string galleryName, string api_version);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class GalleryApplicationsController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IGalleryApplicationsController _implementation;

        public GalleryApplicationsController(IGalleryApplicationsController implementation)
        {
            _implementation = implementation;
        }

        /// <remarks>
        /// Create or update a gallery Application Definition.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition is to be created.</param>
        /// <param name="galleryApplicationName">The name of the gallery Application Definition to be created or updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="galleryApplication">Parameters supplied to the create or update gallery Application operation.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}")]
        public System.Threading.Tasks.Task<GalleryApplication> CreateOrUpdate(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromBody] GalleryApplication galleryApplication)
        {

            return _implementation.CreateOrUpdateAsync(subscriptionId, resourceGroupName, galleryName, galleryApplicationName, api_version, galleryApplication);
        }

        /// <remarks>
        /// Update a gallery Application Definition.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition is to be updated.</param>
        /// <param name="galleryApplicationName">The name of the gallery Application Definition to be updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="galleryApplication">Parameters supplied to the update gallery Application operation.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}")]
        public System.Threading.Tasks.Task<GalleryApplication> Update(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromBody] GalleryApplicationUpdate galleryApplication)
        {

            return _implementation.UpdateAsync(subscriptionId, resourceGroupName, galleryName, galleryApplicationName, api_version, galleryApplication);
        }

        /// <remarks>
        /// Retrieves information about a gallery Application Definition.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Application Gallery from which the Application Definitions are to be retrieved.</param>
        /// <param name="galleryApplicationName">The name of the gallery Application Definition to be retrieved.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}")]
        public System.Threading.Tasks.Task<GalleryApplication> Get(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetAsync(subscriptionId, resourceGroupName, galleryName, galleryApplicationName, api_version);
        }

        /// <remarks>
        /// Delete a gallery Application.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition is to be deleted.</param>
        /// <param name="galleryApplicationName">The name of the gallery Application Definition to be deleted.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}")]
        public System.Threading.Tasks.Task Delete(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.DeleteAsync(subscriptionId, resourceGroupName, galleryName, galleryApplicationName, api_version);
        }

        /// <remarks>
        /// List gallery Application Definitions in a gallery.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Application Gallery from which Application Definitions are to be listed.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications")]
        public System.Threading.Tasks.Task<GalleryApplicationList> ListByGallery(string subscriptionId, string resourceGroupName, string galleryName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.ListByGalleryAsync(subscriptionId, resourceGroupName, galleryName, api_version);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IGalleryApplicationVersionsController
    {

        /// <remarks>
        /// Create or update a gallery Application Version.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition resides.</param>

        /// <param name="galleryApplicationName">The name of the gallery Application Definition in which the Application Version is to be created.</param>

        /// <param name="galleryApplicationVersionName">The name of the gallery Application Version to be created. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="galleryApplicationVersion">Parameters supplied to the create or update gallery Application Version operation.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryApplicationVersion> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string galleryApplicationVersionName, string api_version, GalleryApplicationVersion galleryApplicationVersion);

        /// <remarks>
        /// Update a gallery Application Version.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition resides.</param>

        /// <param name="galleryApplicationName">The name of the gallery Application Definition in which the Application Version is to be updated.</param>

        /// <param name="galleryApplicationVersionName">The name of the gallery Application Version to be updated. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="galleryApplicationVersion">Parameters supplied to the update gallery Application Version operation.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryApplicationVersion> UpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string galleryApplicationVersionName, string api_version, GalleryApplicationVersionUpdate galleryApplicationVersion);

        /// <remarks>
        /// Retrieves information about a gallery Application Version.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition resides.</param>

        /// <param name="galleryApplicationName">The name of the gallery Application Definition in which the Application Version resides.</param>

        /// <param name="galleryApplicationVersionName">The name of the gallery Application Version to be retrieved.</param>

        /// <param name="expand">The expand expression to apply on the operation.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryApplicationVersion> GetAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string galleryApplicationVersionName, _expand? expand, string api_version);

        /// <remarks>
        /// Delete a gallery Application Version.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition resides.</param>

        /// <param name="galleryApplicationName">The name of the gallery Application Definition in which the Application Version resides.</param>

        /// <param name="galleryApplicationVersionName">The name of the gallery Application Version to be deleted.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task DeleteAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string galleryApplicationVersionName, string api_version);

        /// <remarks>
        /// List gallery Application Versions in a gallery Application Definition.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition resides.</param>

        /// <param name="galleryApplicationName">The name of the Shared Application Gallery Application Definition from which the Application Versions are to be listed.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryApplicationVersionList> ListByGalleryApplicationAsync(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string api_version);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class GalleryApplicationVersionsController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IGalleryApplicationVersionsController _implementation;

        public GalleryApplicationVersionsController(IGalleryApplicationVersionsController implementation)
        {
            _implementation = implementation;
        }

        /// <remarks>
        /// Create or update a gallery Application Version.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition resides.</param>
        /// <param name="galleryApplicationName">The name of the gallery Application Definition in which the Application Version is to be created.</param>
        /// <param name="galleryApplicationVersionName">The name of the gallery Application Version to be created. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="galleryApplicationVersion">Parameters supplied to the create or update gallery Application Version operation.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}")]
        public System.Threading.Tasks.Task<GalleryApplicationVersion> CreateOrUpdate(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string galleryApplicationVersionName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromBody] GalleryApplicationVersion galleryApplicationVersion)
        {

            return _implementation.CreateOrUpdateAsync(subscriptionId, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, api_version, galleryApplicationVersion);
        }

        /// <remarks>
        /// Update a gallery Application Version.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition resides.</param>
        /// <param name="galleryApplicationName">The name of the gallery Application Definition in which the Application Version is to be updated.</param>
        /// <param name="galleryApplicationVersionName">The name of the gallery Application Version to be updated. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="galleryApplicationVersion">Parameters supplied to the update gallery Application Version operation.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}")]
        public System.Threading.Tasks.Task<GalleryApplicationVersion> Update(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string galleryApplicationVersionName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromBody] GalleryApplicationVersionUpdate galleryApplicationVersion)
        {

            return _implementation.UpdateAsync(subscriptionId, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, api_version, galleryApplicationVersion);
        }

        /// <remarks>
        /// Retrieves information about a gallery Application Version.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition resides.</param>
        /// <param name="galleryApplicationName">The name of the gallery Application Definition in which the Application Version resides.</param>
        /// <param name="galleryApplicationVersionName">The name of the gallery Application Version to be retrieved.</param>
        /// <param name="expand">The expand expression to apply on the operation.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}")]
        public System.Threading.Tasks.Task<GalleryApplicationVersion> Get(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string galleryApplicationVersionName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "$expand")] _expand? expand, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetAsync(subscriptionId, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, expand, api_version);
        }

        /// <remarks>
        /// Delete a gallery Application Version.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition resides.</param>
        /// <param name="galleryApplicationName">The name of the gallery Application Definition in which the Application Version resides.</param>
        /// <param name="galleryApplicationVersionName">The name of the gallery Application Version to be deleted.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions/{galleryApplicationVersionName}")]
        public System.Threading.Tasks.Task Delete(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, string galleryApplicationVersionName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.DeleteAsync(subscriptionId, resourceGroupName, galleryName, galleryApplicationName, galleryApplicationVersionName, api_version);
        }

        /// <remarks>
        /// List gallery Application Versions in a gallery Application Definition.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Application Gallery in which the Application Definition resides.</param>
        /// <param name="galleryApplicationName">The name of the Shared Application Gallery Application Definition from which the Application Versions are to be listed.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{galleryApplicationName}/versions")]
        public System.Threading.Tasks.Task<GalleryApplicationVersionList> ListByGalleryApplication(string subscriptionId, string resourceGroupName, string galleryName, string galleryApplicationName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.ListByGalleryApplicationAsync(subscriptionId, resourceGroupName, galleryName, galleryApplicationName, api_version);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface ISoftDeletedResourceController
    {

        /// <remarks>
        /// List soft-deleted resources of an artifact in the gallery, such as soft-deleted gallery image version of an image.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Gallery in which the soft-deleted resources resides.</param>

        /// <param name="artifactType">The type of the artifact to be listed, such as gallery image version.</param>

        /// <param name="artifactName">The artifact name to be listed. If artifact type is Images, then the artifact name should be the gallery image name.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GallerySoftDeletedResourceList> ListByArtifactNameAsync(string subscriptionId, string resourceGroupName, string galleryName, string artifactType, string artifactName, string api_version);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class SoftDeletedResourceController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private ISoftDeletedResourceController _implementation;

        public SoftDeletedResourceController(ISoftDeletedResourceController implementation)
        {
            _implementation = implementation;
        }

        /// <remarks>
        /// List soft-deleted resources of an artifact in the gallery, such as soft-deleted gallery image version of an image.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Gallery in which the soft-deleted resources resides.</param>
        /// <param name="artifactType">The type of the artifact to be listed, such as gallery image version.</param>
        /// <param name="artifactName">The artifact name to be listed. If artifact type is Images, then the artifact name should be the gallery image name.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/softDeletedArtifactTypes/{artifactType}/artifacts/{artifactName}/versions")]
        public System.Threading.Tasks.Task<GallerySoftDeletedResourceList> ListByArtifactName(string subscriptionId, string resourceGroupName, string galleryName, string artifactType, string artifactName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.ListByArtifactNameAsync(subscriptionId, resourceGroupName, galleryName, artifactType, artifactName, api_version);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IGallerySharingProfileController
    {

        /// <remarks>
        /// Update sharing profile of a gallery.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="sharingUpdate">Parameters supplied to the update gallery sharing profile.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<SharingUpdate> UpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string api_version, SharingUpdate sharingUpdate);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class GallerySharingProfileController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IGallerySharingProfileController _implementation;

        public GallerySharingProfileController(IGallerySharingProfileController implementation)
        {
            _implementation = implementation;
        }

        /// <remarks>
        /// Update sharing profile of a gallery.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="sharingUpdate">Parameters supplied to the update gallery sharing profile.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/share")]
        public System.Threading.Tasks.Task<SharingUpdate> Update(string subscriptionId, string resourceGroupName, string galleryName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromBody] SharingUpdate sharingUpdate)
        {

            return _implementation.UpdateAsync(subscriptionId, resourceGroupName, galleryName, api_version, sharingUpdate);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IGalleryInVMAccessControlProfilesController
    {

        /// <remarks>
        /// Create or update a gallery inVMAccessControlProfile.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery in which the InVMAccessControlProfile is to be created.</param>

        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile to be created or updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="galleryInVMAccessControlProfile">Parameters supplied to the create or update gallery inVMAccessControlProfile operation.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryInVMAccessControlProfile> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, string api_version, GalleryInVMAccessControlProfile galleryInVMAccessControlProfile);

        /// <remarks>
        /// Update a gallery inVMAccessControlProfile.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery in which the InVMAccessControlProfile is to be updated.</param>

        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile to be updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="galleryInVMAccessControlProfile">Parameters supplied to the update gallery inVMAccessControlProfile operation.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryInVMAccessControlProfile> UpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, string api_version, GalleryInVMAccessControlProfileUpdate galleryInVMAccessControlProfile);

        /// <remarks>
        /// Retrieves information about a gallery inVMAccessControlProfile.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery from which the InVMAccessControlProfiles are to be retrieved.</param>

        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile to be retrieved.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryInVMAccessControlProfile> GetAsync(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, string api_version);

        /// <remarks>
        /// Delete a gallery inVMAccessControlProfile.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">he name of the Shared Image Gallery in which the InVMAccessControlProfile resides.</param>

        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile to be deleted.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>Accepted</returns>

        System.Threading.Tasks.Task DeleteAsync(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, string api_version);

        /// <remarks>
        /// List gallery inVMAccessControlProfiles in a gallery.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery from which the InVMAccessControlProfiles are to be listed.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryInVMAccessControlProfileList> ListByGalleryAsync(string subscriptionId, string resourceGroupName, string galleryName, string api_version);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class GalleryInVMAccessControlProfilesController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IGalleryInVMAccessControlProfilesController _implementation;

        public GalleryInVMAccessControlProfilesController(IGalleryInVMAccessControlProfilesController implementation)
        {
            _implementation = implementation;
        }

        /// <remarks>
        /// Create or update a gallery inVMAccessControlProfile.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery in which the InVMAccessControlProfile is to be created.</param>
        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile to be created or updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="galleryInVMAccessControlProfile">Parameters supplied to the create or update gallery inVMAccessControlProfile operation.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}")]
        public System.Threading.Tasks.Task<GalleryInVMAccessControlProfile> CreateOrUpdate(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromBody] GalleryInVMAccessControlProfile galleryInVMAccessControlProfile)
        {

            return _implementation.CreateOrUpdateAsync(subscriptionId, resourceGroupName, galleryName, inVMAccessControlProfileName, api_version, galleryInVMAccessControlProfile);
        }

        /// <remarks>
        /// Update a gallery inVMAccessControlProfile.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery in which the InVMAccessControlProfile is to be updated.</param>
        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile to be updated. The allowed characters are alphabets and numbers with dots, dashes, and periods allowed in the middle. The maximum length is 80 characters.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="galleryInVMAccessControlProfile">Parameters supplied to the update gallery inVMAccessControlProfile operation.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}")]
        public System.Threading.Tasks.Task<GalleryInVMAccessControlProfile> Update(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromBody] GalleryInVMAccessControlProfileUpdate galleryInVMAccessControlProfile)
        {

            return _implementation.UpdateAsync(subscriptionId, resourceGroupName, galleryName, inVMAccessControlProfileName, api_version, galleryInVMAccessControlProfile);
        }

        /// <remarks>
        /// Retrieves information about a gallery inVMAccessControlProfile.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery from which the InVMAccessControlProfiles are to be retrieved.</param>
        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile to be retrieved.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}")]
        public System.Threading.Tasks.Task<GalleryInVMAccessControlProfile> Get(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetAsync(subscriptionId, resourceGroupName, galleryName, inVMAccessControlProfileName, api_version);
        }

        /// <remarks>
        /// Delete a gallery inVMAccessControlProfile.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">he name of the Shared Image Gallery in which the InVMAccessControlProfile resides.</param>
        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile to be deleted.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>Accepted</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}")]
        public System.Threading.Tasks.Task Delete(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.DeleteAsync(subscriptionId, resourceGroupName, galleryName, inVMAccessControlProfileName, api_version);
        }

        /// <remarks>
        /// List gallery inVMAccessControlProfiles in a gallery.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery from which the InVMAccessControlProfiles are to be listed.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles")]
        public System.Threading.Tasks.Task<GalleryInVMAccessControlProfileList> ListByGallery(string subscriptionId, string resourceGroupName, string galleryName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.ListByGalleryAsync(subscriptionId, resourceGroupName, galleryName, api_version);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IGalleryInVMAccessControlProfileVersionsController
    {

        /// <remarks>
        /// Create or update a gallery inVMAccessControlProfile version.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery in which the inVMAccessControlProfile resides.</param>

        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile in which the inVMAccessControlProfile version is to be created.</param>

        /// <param name="inVMAccessControlProfileVersionName">The name of the gallery inVMAccessControlProfile version to be created. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="galleryInVMAccessControlProfileVersion">Parameters supplied to the create or update gallery inVMAccessControlProfile version operation.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryInVMAccessControlProfileVersion> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, string inVMAccessControlProfileVersionName, string api_version, GalleryInVMAccessControlProfileVersion galleryInVMAccessControlProfileVersion);

        /// <remarks>
        /// Update a gallery inVMAccessControlProfile version.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery in which the inVMAccessControlProfile resides.</param>

        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile in which the inVMAccessControlProfile version is to be updated.</param>

        /// <param name="inVMAccessControlProfileVersionName">The name of the gallery inVMAccessControlProfile version to be updated. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <param name="galleryInVMAccessControlProfileVersion">Parameters supplied to the update gallery inVMAccessControlProfile version operation.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryInVMAccessControlProfileVersion> UpdateAsync(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, string inVMAccessControlProfileVersionName, string api_version, GalleryInVMAccessControlProfileVersionUpdate galleryInVMAccessControlProfileVersion);

        /// <remarks>
        /// Retrieves information about a gallery inVMAccessControlProfile version.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery in which the inVMAccessControlProfile resides.</param>

        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile in which the inVMAccessControlProfile version resides.</param>

        /// <param name="inVMAccessControlProfileVersionName">The name of the gallery inVMAccessControlProfile version to be retrieved.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryInVMAccessControlProfileVersion> GetAsync(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, string inVMAccessControlProfileVersionName, string api_version);

        /// <remarks>
        /// Delete a gallery inVMAccessControlProfile version.
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery in which the inVMAccessControlProfile resides.</param>

        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile in which the inVMAccessControlProfile version resides.</param>

        /// <param name="inVMAccessControlProfileVersionName">The name of the gallery inVMAccessControlProfile version to be deleted.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>Accepted</returns>

        System.Threading.Tasks.Task DeleteAsync(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, string inVMAccessControlProfileVersionName, string api_version);

        /// <remarks>
        /// List gallery inVMAccessControlProfile versions in a gallery inVMAccessControlProfile
        /// </remarks>

        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>

        /// <param name="resourceGroupName">The name of the resource group.</param>

        /// <param name="galleryName">The name of the Shared Image Gallery in which the inVMAccessControlProfile resides.</param>

        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile from which the inVMAccessControlProfile versions are to be listed.</param>

        /// <param name="api_version">Client Api Version.</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<GalleryInVMAccessControlProfileVersionList> ListByGalleryInVMAccessControlProfileAsync(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, string api_version);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class GalleryInVMAccessControlProfileVersionsController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IGalleryInVMAccessControlProfileVersionsController _implementation;

        public GalleryInVMAccessControlProfileVersionsController(IGalleryInVMAccessControlProfileVersionsController implementation)
        {
            _implementation = implementation;
        }

        /// <remarks>
        /// Create or update a gallery inVMAccessControlProfile version.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery in which the inVMAccessControlProfile resides.</param>
        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile in which the inVMAccessControlProfile version is to be created.</param>
        /// <param name="inVMAccessControlProfileVersionName">The name of the gallery inVMAccessControlProfile version to be created. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="galleryInVMAccessControlProfileVersion">Parameters supplied to the create or update gallery inVMAccessControlProfile version operation.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}/versions/{inVMAccessControlProfileVersionName}")]
        public System.Threading.Tasks.Task<GalleryInVMAccessControlProfileVersion> CreateOrUpdate(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, string inVMAccessControlProfileVersionName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromBody] GalleryInVMAccessControlProfileVersion galleryInVMAccessControlProfileVersion)
        {

            return _implementation.CreateOrUpdateAsync(subscriptionId, resourceGroupName, galleryName, inVMAccessControlProfileName, inVMAccessControlProfileVersionName, api_version, galleryInVMAccessControlProfileVersion);
        }

        /// <remarks>
        /// Update a gallery inVMAccessControlProfile version.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery in which the inVMAccessControlProfile resides.</param>
        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile in which the inVMAccessControlProfile version is to be updated.</param>
        /// <param name="inVMAccessControlProfileVersionName">The name of the gallery inVMAccessControlProfile version to be updated. Needs to follow semantic version name pattern: The allowed characters are digit and period. Digits must be within the range of a 32-bit integer. Format: &lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Patch&gt;</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <param name="galleryInVMAccessControlProfileVersion">Parameters supplied to the update gallery inVMAccessControlProfile version operation.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}/versions/{inVMAccessControlProfileVersionName}")]
        public System.Threading.Tasks.Task<GalleryInVMAccessControlProfileVersion> Update(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, string inVMAccessControlProfileVersionName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version, [Microsoft.AspNetCore.Mvc.FromBody] GalleryInVMAccessControlProfileVersionUpdate galleryInVMAccessControlProfileVersion)
        {

            return _implementation.UpdateAsync(subscriptionId, resourceGroupName, galleryName, inVMAccessControlProfileName, inVMAccessControlProfileVersionName, api_version, galleryInVMAccessControlProfileVersion);
        }

        /// <remarks>
        /// Retrieves information about a gallery inVMAccessControlProfile version.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery in which the inVMAccessControlProfile resides.</param>
        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile in which the inVMAccessControlProfile version resides.</param>
        /// <param name="inVMAccessControlProfileVersionName">The name of the gallery inVMAccessControlProfile version to be retrieved.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}/versions/{inVMAccessControlProfileVersionName}")]
        public System.Threading.Tasks.Task<GalleryInVMAccessControlProfileVersion> Get(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, string inVMAccessControlProfileVersionName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.GetAsync(subscriptionId, resourceGroupName, galleryName, inVMAccessControlProfileName, inVMAccessControlProfileVersionName, api_version);
        }

        /// <remarks>
        /// Delete a gallery inVMAccessControlProfile version.
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery in which the inVMAccessControlProfile resides.</param>
        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile in which the inVMAccessControlProfile version resides.</param>
        /// <param name="inVMAccessControlProfileVersionName">The name of the gallery inVMAccessControlProfile version to be deleted.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>Accepted</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}/versions/{inVMAccessControlProfileVersionName}")]
        public System.Threading.Tasks.Task Delete(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, string inVMAccessControlProfileVersionName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.DeleteAsync(subscriptionId, resourceGroupName, galleryName, inVMAccessControlProfileName, inVMAccessControlProfileVersionName, api_version);
        }

        /// <remarks>
        /// List gallery inVMAccessControlProfile versions in a gallery inVMAccessControlProfile
        /// </remarks>
        /// <param name="subscriptionId">Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.</param>
        /// <param name="resourceGroupName">The name of the resource group.</param>
        /// <param name="galleryName">The name of the Shared Image Gallery in which the inVMAccessControlProfile resides.</param>
        /// <param name="inVMAccessControlProfileName">The name of the gallery inVMAccessControlProfile from which the inVMAccessControlProfile versions are to be listed.</param>
        /// <param name="api_version">Client Api Version.</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/inVMAccessControlProfiles/{inVMAccessControlProfileName}/versions")]
        public System.Threading.Tasks.Task<GalleryInVMAccessControlProfileVersionList> ListByGalleryInVMAccessControlProfile(string subscriptionId, string resourceGroupName, string galleryName, string inVMAccessControlProfileName, [Microsoft.AspNetCore.Mvc.FromQuery(Name = "api-version")] string api_version)
        {

            return _implementation.ListByGalleryInVMAccessControlProfileAsync(subscriptionId, resourceGroupName, galleryName, inVMAccessControlProfileName, api_version);
        }

    }

    /// <summary>
    /// Specifies information about the Shared Image Gallery that you want to create or update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Gallery : Resource
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryProperties Properties { get; set; }

        /// <summary>
        /// The identity of the gallery, if configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryIdentity Identity { get; set; }

    }

    /// <summary>
    /// Specifies information about the Shared Image Gallery that you want to update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryUpdate : UpdateResourceDefinition
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryProperties Properties { get; set; }

        /// <summary>
        /// The identity of the gallery, if configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryIdentity Identity { get; set; }

    }

    /// <summary>
    /// Describes the properties of a Shared Image Gallery.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryProperties
    {
        /// <summary>
        /// The description of this Shared Image Gallery resource. This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryIdentifier Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryProvisioningState? ProvisioningState { get; set; }

        [Newtonsoft.Json.JsonProperty("sharingProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SharingProfile SharingProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("softDeletePolicy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SoftDeletePolicy SoftDeletePolicy { get; set; }

        [Newtonsoft.Json.JsonProperty("sharingStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SharingStatus SharingStatus { get; set; }

    }

    /// <summary>
    /// Describes the gallery unique name.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryIdentifier
    {
        /// <summary>
        /// The unique name of the Shared Image Gallery. This name is generated automatically by Azure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uniqueName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueName { get; set; }

    }

    /// <summary>
    /// Profile for gallery sharing to subscription or tenant
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SharingProfile
    {
        /// <summary>
        /// This property allows you to specify the permission of sharing gallery. Possible values are: **Private,** **Groups,** **Community.**
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SharingProfilePermissions? Permissions { get; set; }

        /// <summary>
        /// A list of sharing profile groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SharingProfileGroup> Groups { get; set; }

        /// <summary>
        /// Information of community gallery if current gallery is shared to community.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("communityGalleryInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CommunityGalleryInfo CommunityGalleryInfo { get; set; }

    }

    /// <summary>
    /// Group of the gallery sharing profile
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SharingProfileGroup
    {
        /// <summary>
        /// This property allows you to specify the type of sharing group. Possible values are: **Subscriptions,** **AADTenants.**
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SharingProfileGroupType? Type { get; set; }

        /// <summary>
        /// A list of subscription/tenant ids the gallery is aimed to be shared to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Ids { get; set; }

    }

    /// <summary>
    /// Information of community gallery if current gallery is shared to community
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommunityGalleryInfo
    {
        /// <summary>
        /// The link to the publisher website. Visible to all users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publisherUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublisherUri { get; set; }

        /// <summary>
        /// Community gallery publisher support email. The email address of the publisher. Visible to all users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publisherContact", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublisherContact { get; set; }

        /// <summary>
        /// End-user license agreement for community gallery image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eula", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Eula { get; set; }

        /// <summary>
        /// The prefix of the gallery name that will be displayed publicly. Visible to all users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicNamePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PublicNamePrefix { get; set; }

        /// <summary>
        /// Contains info about whether community gallery sharing is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("communityGalleryEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CommunityGalleryEnabled { get; set; }

        /// <summary>
        /// Community gallery public name list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publicNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> PublicNames { get; set; }

    }

    /// <summary>
    /// Contains information about the soft deletion policy of the gallery.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SoftDeletePolicy
    {
        /// <summary>
        /// Enables soft-deletion for resources in this gallery, allowing them to be recovered within retention time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSoftDeleteEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSoftDeleteEnabled { get; set; }

    }

    /// <summary>
    /// Sharing status of current gallery.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SharingStatus
    {
        /// <summary>
        /// Aggregated sharing state of current gallery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregatedState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SharingState? AggregatedState { get; set; }

        /// <summary>
        /// Summary of all regional sharing status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<RegionalSharingStatus> Summary { get; set; }

    }

    /// <summary>
    /// The sharing state of the gallery, which only appears in the response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SharingState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 3,

    }

    /// <summary>
    /// Gallery regional sharing status
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegionalSharingStatus
    {
        /// <summary>
        /// Region name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        /// <summary>
        /// Gallery sharing state in current region
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SharingState? State { get; set; }

        /// <summary>
        /// Details of gallery regional sharing failure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

    }

    /// <summary>
    /// Identity for the virtual machine.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryIdentity
    {
        /// <summary>
        /// The principal id of the gallery identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("principalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrincipalId { get; set; }

        /// <summary>
        /// The AAD tenant id of the gallery identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TenantId { get; set; }

        /// <summary>
        /// The type of identity used for the gallery. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove all identities from the gallery.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryIdentityType? Type { get; set; }

        /// <summary>
        /// The list of user identities associated with the gallery. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userAssignedIdentities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserAssignedIdentities UserAssignedIdentities { get; set; }

    }

    /// <summary>
    /// Specifies information about the gallery Application Definition that you want to create or update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryApplication : Resource
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryApplicationProperties Properties { get; set; }

    }

    /// <summary>
    /// Specifies information about the gallery Application Definition that you want to update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryApplicationUpdate : UpdateResourceDefinition
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryApplicationProperties Properties { get; set; }

    }

    /// <summary>
    /// Describes the properties of a gallery Application Definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryApplicationProperties
    {
        /// <summary>
        /// The description of this gallery Application Definition resource. This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The Eula agreement for the gallery Application Definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eula", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Eula { get; set; }

        /// <summary>
        /// The privacy statement uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privacyStatementUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivacyStatementUri { get; set; }

        /// <summary>
        /// The release note uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("releaseNoteUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReleaseNoteUri { get; set; }

        /// <summary>
        /// The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endOfLifeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndOfLifeDate { get; set; }

        /// <summary>
        /// This property allows you to specify the supported type of the OS that application is built for. Possible values are: **Windows,** **Linux.**
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportedOSType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryApplicationPropertiesSupportedOSType SupportedOSType { get; set; }

        /// <summary>
        /// A list of custom actions that can be performed with all of the Gallery Application Versions within this Gallery Application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<GalleryApplicationCustomAction> CustomActions { get; set; }

    }

    /// <summary>
    /// Specifies information about the gallery Application Version that you want to create or update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryApplicationVersion : Resource
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryApplicationVersionProperties Properties { get; set; }

    }

    /// <summary>
    /// Specifies information about the gallery Application Version that you want to update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryApplicationVersionUpdate : UpdateResourceDefinition
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryApplicationVersionProperties Properties { get; set; }

    }

    /// <summary>
    /// Describes the properties of a gallery image version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryApplicationVersionProperties
    {
        [Newtonsoft.Json.JsonProperty("publishingProfile", Required = Newtonsoft.Json.Required.Always)]
        public GalleryApplicationVersionPublishingProfile PublishingProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("safetyProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryApplicationVersionSafetyProfile SafetyProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryProvisioningState? ProvisioningState { get; set; }

        [Newtonsoft.Json.JsonProperty("replicationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReplicationStatus ReplicationStatus { get; set; }

    }

    /// <summary>
    /// The publishing profile of a gallery image version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryApplicationVersionPublishingProfile : GalleryArtifactPublishingProfileBase
    {
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        public UserArtifactSource Source { get; set; }

        [Newtonsoft.Json.JsonProperty("manageActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserArtifactManage ManageActions { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserArtifactSettings Settings { get; set; }

        /// <summary>
        /// Optional. Additional settings to pass to the vm-application-manager extension. For advanced use only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advancedSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> AdvancedSettings { get; set; }

        /// <summary>
        /// Optional. Whether or not this application reports health.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enableHealthCheck", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? EnableHealthCheck { get; set; }

        /// <summary>
        /// A list of custom actions that can be performed with this Gallery Application Version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<GalleryApplicationCustomAction> CustomActions { get; set; }

    }

    /// <summary>
    /// The safety profile of the Gallery Application Version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryApplicationVersionSafetyProfile : GalleryArtifactSafetyProfileBase
    {

    }

    /// <summary>
    /// A custom action that can be performed with a Gallery Application Version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryApplicationCustomAction
    {
        /// <summary>
        /// The name of the custom action.  Must be unique within the Gallery Application Version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The script to run when executing this custom action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("script", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Script { get; set; }

        /// <summary>
        /// Description to help the users understand what this custom action does.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The parameters that this custom action uses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<GalleryApplicationCustomActionParameter> Parameters { get; set; }

    }

    /// <summary>
    /// The definition of a parameter that can be passed to a custom action of a Gallery Application Version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryApplicationCustomActionParameter
    {
        /// <summary>
        /// The name of the custom action.  Must be unique within the Gallery Application Version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates whether this parameter must be passed when running the custom action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Required { get; set; }

        /// <summary>
        /// Specifies the type of the custom action parameter. Possible values are: String, ConfigurationDataBlob or LogOutputBlob
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryApplicationCustomActionParameterType? Type { get; set; }

        /// <summary>
        /// The default value of the parameter.  Only applies to string types
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// A description to help users understand what this parameter means
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    /// <summary>
    /// The source image from which the Image Version is going to be created.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserArtifactSource
    {
        /// <summary>
        /// Required. The mediaLink of the artifact, must be a readable storage page blob.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mediaLink", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MediaLink { get; set; }

        /// <summary>
        /// Optional. The defaultConfigurationLink of the artifact, must be a readable storage page blob.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultConfigurationLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultConfigurationLink { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserArtifactManage
    {
        /// <summary>
        /// Required. The path and arguments to install the gallery application. This is limited to 4096 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("install", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Install { get; set; }

        /// <summary>
        /// Required. The path and arguments to remove the gallery application. This is limited to 4096 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remove", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Remove { get; set; }

        /// <summary>
        /// Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove command on the previous version and install command on the current version of the gallery application. This is limited to 4096 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("update", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Update { get; set; }

    }

    /// <summary>
    /// Additional settings for the VM app that contains the target package and config file name when it is deployed to target VM or VM scale set.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserArtifactSettings
    {
        /// <summary>
        /// Optional. The name to assign the downloaded package file on the VM. This is limited to 4096 characters. If not specified, the package file will be named the same as the Gallery Application name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("packageFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackageFileName { get; set; }

        /// <summary>
        /// Optional. The name to assign the downloaded config file on the VM. This is limited to 4096 characters. If not specified, the config file will be named the Gallery Application name appended with "_config".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configFileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConfigFileName { get; set; }

        /// <summary>
        /// Optional. The action to be taken with regards to install/update/remove of the gallery application in the event of a reboot.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scriptBehaviorAfterReboot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserArtifactSettingsScriptBehaviorAfterReboot? ScriptBehaviorAfterReboot { get; set; }

    }

    /// <summary>
    /// Specifies information about the gallery image definition that you want to create or update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryImage : Resource
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryImageProperties Properties { get; set; }

    }

    /// <summary>
    /// Specifies information about the gallery image definition that you want to update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryImageUpdate : UpdateResourceDefinition
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryImageProperties Properties { get; set; }

    }

    /// <summary>
    /// Describes the properties of a gallery image definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryImageProperties
    {
        /// <summary>
        /// The description of this gallery image definition resource. This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The Eula agreement for the gallery image definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eula", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Eula { get; set; }

        /// <summary>
        /// The privacy statement uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privacyStatementUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivacyStatementUri { get; set; }

        /// <summary>
        /// The release note uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("releaseNoteUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReleaseNoteUri { get; set; }

        /// <summary>
        /// This property allows you to specify the type of the OS that is included in the disk when creating a VM from a managed image. Possible values are: **Windows,** **Linux.**
        /// </summary>
        [Newtonsoft.Json.JsonProperty("osType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryImagePropertiesOsType OsType { get; set; }

        /// <summary>
        /// This property allows the user to specify whether the virtual machines created under this image are 'Generalized' or 'Specialized'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("osState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryImagePropertiesOsState OsState { get; set; }

        /// <summary>
        /// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hyperVGeneration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryImagePropertiesHyperVGeneration? HyperVGeneration { get; set; }

        /// <summary>
        /// The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endOfLifeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndOfLifeDate { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        public GalleryImageIdentifier Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("recommended", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecommendedMachineConfiguration Recommended { get; set; }

        [Newtonsoft.Json.JsonProperty("disallowed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Disallowed Disallowed { get; set; }

        [Newtonsoft.Json.JsonProperty("purchasePlan", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImagePurchasePlan PurchasePlan { get; set; }

        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// A list of gallery image features.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<GalleryImageFeature> Features { get; set; }

        [Newtonsoft.Json.JsonProperty("architecture", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Architecture? Architecture { get; set; }

        /// <summary>
        /// Optional. Must be set to true if the gallery image features are being updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowUpdateImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowUpdateImage { get; set; }

    }

    /// <summary>
    /// Specifies information about the gallery image version that you want to create or update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryImageVersion : Resource
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryImageVersionProperties Properties { get; set; }

    }

    /// <summary>
    /// Specifies information about the gallery image version that you want to update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryImageVersionUpdate : UpdateResourceDefinition
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryImageVersionProperties Properties { get; set; }

    }

    /// <summary>
    /// Describes the properties of a gallery image version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryImageVersionProperties
    {
        [Newtonsoft.Json.JsonProperty("publishingProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryArtifactPublishingProfileBase PublishingProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryProvisioningState? ProvisioningState { get; set; }

        [Newtonsoft.Json.JsonProperty("storageProfile", Required = Newtonsoft.Json.Required.Always)]
        public GalleryImageVersionStorageProfile StorageProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("safetyProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryImageVersionSafetyProfile SafetyProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("replicationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReplicationStatus ReplicationStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("securityProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageVersionSecurityProfile SecurityProfile { get; set; }

        /// <summary>
        /// Indicates if this is a soft-delete resource restoration request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Restore { get; set; }

        [Newtonsoft.Json.JsonProperty("validationsProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValidationsProfile ValidationsProfile { get; set; }

    }

    /// <summary>
    /// Describes the basic gallery artifact publishing profile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryArtifactPublishingProfileBase
    {
        /// <summary>
        /// The target regions where the Image Version is going to be replicated to. This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetRegions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TargetRegion> TargetRegions { get; set; }

        /// <summary>
        /// The number of replicas of the Image Version to be created per region. This property would take effect for a region when regionalReplicaCount is not specified. This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("replicaCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ReplicaCount { get; set; }

        /// <summary>
        /// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludeFromLatest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeFromLatest { get; set; }

        /// <summary>
        /// The timestamp for when the gallery image version is published.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publishedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PublishedDate { get; set; }

        /// <summary>
        /// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endOfLifeDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndOfLifeDate { get; set; }

        /// <summary>
        /// Specifies the storage account type to be used to store the image. This property is not updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storageAccountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryArtifactPublishingProfileBaseStorageAccountType? StorageAccountType { get; set; }

        /// <summary>
        /// Optional parameter which specifies the mode to be used for replication. This property is not updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("replicationMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryArtifactPublishingProfileBaseReplicationMode? ReplicationMode { get; set; }

        /// <summary>
        /// The target extended locations where the Image Version is going to be replicated to. This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetExtendedLocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<GalleryTargetExtendedLocation> TargetExtendedLocations { get; set; }

    }

    /// <summary>
    /// Describes the target region information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TargetRegion
    {
        /// <summary>
        /// The name of the region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The number of replicas of the Image Version to be created per region. This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regionalReplicaCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegionalReplicaCount { get; set; }

        /// <summary>
        /// Specifies the storage account type to be used to store the image. This property is not updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storageAccountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TargetRegionStorageAccountType? StorageAccountType { get; set; }

        [Newtonsoft.Json.JsonProperty("encryption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EncryptionImages Encryption { get; set; }

        /// <summary>
        /// Contains the flag setting to hide an image when users specify version='latest'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludeFromLatest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeFromLatest { get; set; }

        /// <summary>
        /// List of storage sku with replica count to create direct drive replicas.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalReplicaSets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AdditionalReplicaSet> AdditionalReplicaSets { get; set; }

    }

    /// <summary>
    /// Describes the additional replica set information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalReplicaSet
    {
        /// <summary>
        /// Specifies the storage account type to be used to create the direct drive replicas
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storageAccountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AdditionalReplicaSetStorageAccountType? StorageAccountType { get; set; }

        /// <summary>
        /// The number of direct drive replicas of the Image Version to be created.This Property is updatable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regionalReplicaCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegionalReplicaCount { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryTargetExtendedLocation
    {
        /// <summary>
        /// The name of the region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("extendedLocation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryExtendedLocation ExtendedLocation { get; set; }

        /// <summary>
        /// The number of replicas of the Image Version to be created per extended location. This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedLocationReplicaCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExtendedLocationReplicaCount { get; set; }

        /// <summary>
        /// Specifies the storage account type to be used to store the image. This property is not updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storageAccountType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryTargetExtendedLocationStorageAccountType? StorageAccountType { get; set; }

        [Newtonsoft.Json.JsonProperty("encryption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EncryptionImages Encryption { get; set; }

    }

    /// <summary>
    /// The name of the extended location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryExtendedLocation
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryExtendedLocationType? Type { get; set; }

    }

    /// <summary>
    /// It is type of the extended location.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryExtendedLocationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EdgeZone")]
        EdgeZone = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 1,

    }

    /// <summary>
    /// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EncryptionImages
    {
        [Newtonsoft.Json.JsonProperty("osDiskImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OSDiskImageEncryption OsDiskImage { get; set; }

        /// <summary>
        /// A list of encryption specifications for data disk images.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataDiskImages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<DataDiskImageEncryption> DataDiskImages { get; set; }

    }

    /// <summary>
    /// Contains encryption settings for an OS disk image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OSDiskImageEncryption : DiskImageEncryption
    {
        /// <summary>
        /// This property specifies the security profile of an OS disk image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("securityProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OSDiskImageSecurityProfile SecurityProfile { get; set; }

    }

    /// <summary>
    /// Contains security profile for an OS disk image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OSDiskImageSecurityProfile
    {
        /// <summary>
        /// confidential VM encryption types
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confidentialVMEncryptionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OSDiskImageSecurityProfileConfidentialVMEncryptionType? ConfidentialVMEncryptionType { get; set; }

        /// <summary>
        /// secure VM disk encryption set id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secureVMDiskEncryptionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecureVMDiskEncryptionSetId { get; set; }

    }

    /// <summary>
    /// Contains encryption settings for a data disk image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataDiskImageEncryption : DiskImageEncryption
    {
        /// <summary>
        /// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lun", Required = Newtonsoft.Json.Required.Always)]
        public int Lun { get; set; }

    }

    /// <summary>
    /// This is the disk image encryption base class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DiskImageEncryption
    {
        /// <summary>
        /// A relative URI containing the resource ID of the disk encryption set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diskEncryptionSetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiskEncryptionSetId { get; set; }

    }

    /// <summary>
    /// The source image from which the Image Version is going to be created.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryArtifactSource
    {
        [Newtonsoft.Json.JsonProperty("managedImage", Required = Newtonsoft.Json.Required.Always)]
        public ManagedArtifact ManagedImage { get; set; }

    }

    /// <summary>
    /// The managed artifact.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManagedArtifact
    {
        /// <summary>
        /// The managed artifact id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

    }

    /// <summary>
    /// This is the storage profile of a Gallery Image Version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryImageVersionStorageProfile
    {
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryArtifactVersionFullSource Source { get; set; }

        [Newtonsoft.Json.JsonProperty("osDiskImage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryOSDiskImage OsDiskImage { get; set; }

        /// <summary>
        /// A list of data disk images.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataDiskImages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<GalleryDataDiskImage> DataDiskImages { get; set; }

    }

    /// <summary>
    /// The source of the gallery artifact version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryArtifactVersionFullSource : GalleryArtifactVersionSource
    {
        /// <summary>
        /// The resource Id of the source Community Gallery Image.  Only required when using Community Gallery Image as a source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("communityGalleryImageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommunityGalleryImageId { get; set; }

        /// <summary>
        /// The resource Id of the source virtual machine.  Only required when capturing a virtual machine to source this Gallery Image Version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("virtualMachineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VirtualMachineId { get; set; }

    }

    /// <summary>
    /// The gallery artifact version source.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryArtifactVersionSource
    {
        /// <summary>
        /// The id of the gallery artifact version source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    /// <summary>
    /// This is the disk image base class.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryOSDiskImage
    {
        /// <summary>
        /// This property indicates the size of the VHD to be created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sizeInGB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SizeInGB { get; set; }

        /// <summary>
        /// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hostCaching", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryOSDiskImageHostCaching? HostCaching { get; set; }

        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryDiskImageSource Source { get; set; }

    }

    /// <summary>
    /// This is the data disk image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryDataDiskImage : GalleryOSDiskImage
    {
        /// <summary>
        /// This property specifies the logical unit number of the data disk. This value is used to identify data disks within the Virtual Machine and therefore must be unique for each data disk attached to the Virtual Machine.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lun", Required = Newtonsoft.Json.Required.Always)]
        public int Lun { get; set; }

    }

    /// <summary>
    /// The source for the disk image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryDiskImageSource : GalleryArtifactVersionSource
    {
        /// <summary>
        /// The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        /// <summary>
        /// The Storage Account Id that contains the vhd blob being used as a source for this artifact version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storageAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageAccountId { get; set; }

    }

    /// <summary>
    /// This is the safety profile of the Gallery Artifact Version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryArtifactSafetyProfileBase
    {
        /// <summary>
        /// Indicates whether or not removing this Gallery Image Version from replicated regions is allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowDeletionOfReplicatedLocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowDeletionOfReplicatedLocations { get; set; }

    }

    /// <summary>
    /// This is the safety profile of the Gallery Image Version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryImageVersionSafetyProfile : GalleryArtifactSafetyProfileBase
    {
        /// <summary>
        /// Indicates whether this image has been reported as violating Microsoft's policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportedForPolicyViolation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReportedForPolicyViolation { get; set; }

        /// <summary>
        /// A list of Policy Violations that have been reported for this Gallery Image Version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("policyViolations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PolicyViolation> PolicyViolations { get; set; }

        /// <summary>
        /// Indicates whether or not the deletion is blocked for this Gallery Image Version if its End Of Life has not expired.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("blockDeletionBeforeEndOfLife", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BlockDeletionBeforeEndOfLife { get; set; }

    }

    /// <summary>
    /// A policy violation reported against a gallery artifact.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PolicyViolation
    {
        /// <summary>
        /// Describes the nature of the policy violation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PolicyViolationCategory? Category { get; set; }

        /// <summary>
        /// Describes specific details about why this policy violation was reported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

    }

    /// <summary>
    /// The security profile of a gallery image version
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImageVersionSecurityProfile
    {
        [Newtonsoft.Json.JsonProperty("uefiSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryImageVersionUefiSettings UefiSettings { get; set; }

    }

    /// <summary>
    /// This is the replication status of the gallery image version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ReplicationStatus
    {
        /// <summary>
        /// This is the aggregated replication status based on all the regional replication status flags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aggregatedState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReplicationStatusAggregatedState? AggregatedState { get; set; }

        /// <summary>
        /// This is a summary of replication status for each region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<RegionalReplicationStatus> Summary { get; set; }

    }

    /// <summary>
    /// This is the regional replication status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RegionalReplicationStatus
    {
        /// <summary>
        /// The region to which the gallery image version is being replicated to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        /// <summary>
        /// This is the regional replication state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RegionalReplicationStatusState? State { get; set; }

        /// <summary>
        /// The details of the replication status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Details { get; set; }

        /// <summary>
        /// It indicates progress of the replication job.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("progress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Progress { get; set; }

    }

    /// <summary>
    /// Describes the properties of a soft-deleted resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GallerySoftDeletedResourceProperties
    {
        /// <summary>
        /// arm id of the soft-deleted resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceArmId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceArmId { get; set; }

        /// <summary>
        /// artifact type of the soft-deleted resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty("softDeletedArtifactType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GallerySoftDeletedResourcePropertiesSoftDeletedArtifactType? SoftDeletedArtifactType { get; set; }

        /// <summary>
        /// The timestamp for when the resource is soft-deleted. In dateTime offset format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("softDeletedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SoftDeletedTime { get; set; }

    }

    /// <summary>
    /// The details information of soft-deleted resource.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GallerySoftDeletedResource : Resource
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GallerySoftDeletedResourceProperties Properties { get; set; }

    }

    /// <summary>
    /// The List Galleries operation response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryList
    {
        /// <summary>
        /// A list of galleries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<Gallery> Value { get; set; } = new System.Collections.Generic.List<Gallery>();

        /// <summary>
        /// The uri to fetch the next page of galleries. Call ListNext() with this to fetch the next page of galleries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

        [Newtonsoft.Json.JsonProperty("securityProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ImageVersionSecurityProfile SecurityProfile { get; set; }

    }

    /// <summary>
    /// The List Gallery Images operation response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryImageList
    {
        /// <summary>
        /// A list of Shared Image Gallery images.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<GalleryImage> Value { get; set; } = new System.Collections.Generic.List<GalleryImage>();

        /// <summary>
        /// The uri to fetch the next page of Image Definitions in the Shared Image Gallery. Call ListNext() with this to fetch the next page of gallery image definitions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// The List Gallery Image version operation response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryImageVersionList
    {
        /// <summary>
        /// A list of gallery image versions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<GalleryImageVersion> Value { get; set; } = new System.Collections.Generic.List<GalleryImageVersion>();

        /// <summary>
        /// The uri to fetch the next page of gallery image versions. Call ListNext() with this to fetch the next page of gallery image versions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// The List Gallery Applications operation response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryApplicationList
    {
        /// <summary>
        /// A list of Gallery Applications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<GalleryApplication> Value { get; set; } = new System.Collections.Generic.List<GalleryApplication>();

        /// <summary>
        /// The uri to fetch the next page of Application Definitions in the Application Gallery. Call ListNext() with this to fetch the next page of gallery Application Definitions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// The List Gallery Application version operation response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryApplicationVersionList
    {
        /// <summary>
        /// A list of gallery Application Versions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<GalleryApplicationVersion> Value { get; set; } = new System.Collections.Generic.List<GalleryApplicationVersion>();

        /// <summary>
        /// The uri to fetch the next page of gallery Application Versions. Call ListNext() with this to fetch the next page of gallery Application Versions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// The List Soft-deleted Resources operation response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GallerySoftDeletedResourceList
    {
        /// <summary>
        /// A list of soft-deleted resources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<GallerySoftDeletedResource> Value { get; set; } = new System.Collections.Generic.List<GallerySoftDeletedResource>();

        /// <summary>
        /// The uri to fetch the next page of soft-deleted resources. Call ListNext() with this to fetch the next page of soft-deleted resources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// The Update Resource model definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateResourceDefinition
    {
        /// <summary>
        /// Resource Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Resource name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Resource type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Resource tags
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

    }

    /// <summary>
    /// Specifies information about the gallery sharing profile update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SharingUpdate
    {
        /// <summary>
        /// This property allows you to specify the operation type of gallery sharing update. Possible values are: **Add,** **Remove,** **Reset.**
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SharingUpdateOperationType OperationType { get; set; }

        /// <summary>
        /// A list of sharing profile groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<SharingProfileGroup> Groups { get; set; }

    }

    /// <summary>
    /// The provisioning state, which only appears in the response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryProvisioningState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Creating")]
        Creating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Updating")]
        Updating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleting")]
        Deleting = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Migrating")]
        Migrating = 5,

    }

    /// <summary>
    /// The gallery image version with latest version in a particular region.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LatestGalleryImageVersion
    {
        /// <summary>
        /// The name of the latest version in the region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latestVersionName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LatestVersionName { get; set; }

        /// <summary>
        /// region of the Gallery Image Version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Location { get; set; }

    }

    /// <summary>
    /// Contains UEFI settings for the image version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryImageVersionUefiSettings
    {
        /// <summary>
        /// The name of the template(s) that contains default UEFI key signatures that will be added to the image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signatureTemplateNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.List<UefiSignatureTemplateName> SignatureTemplateNames { get; set; }

        [Newtonsoft.Json.JsonProperty("additionalSignatures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UefiKeySignatures AdditionalSignatures { get; set; }

    }

    /// <summary>
    /// The name of the signature template that contains default UEFI keys.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UefiSignatureTemplateName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NoSignatureTemplate")]
        NoSignatureTemplate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MicrosoftUefiCertificateAuthorityTemplate")]
        MicrosoftUefiCertificateAuthorityTemplate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MicrosoftWindowsTemplate")]
        MicrosoftWindowsTemplate = 2,

    }

    /// <summary>
    /// Additional UEFI key signatures that will be added to the image in addition to the signature templates
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UefiKeySignatures
    {
        /// <summary>
        /// The Platform Key of this image version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UefiKey Pk { get; set; }

        /// <summary>
        /// The Key Encryption Keys of this image version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kek", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UefiKey> Kek { get; set; }

        /// <summary>
        /// The database of UEFI keys for this image version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("db", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UefiKey> Db { get; set; }

        /// <summary>
        /// The database of revoked UEFI keys for this image version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dbx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<UefiKey> Dbx { get; set; }

    }

    /// <summary>
    /// This is the validations profile of a Gallery Image Version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidationsProfile
    {
        /// <summary>
        /// The published time of the image version
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validationEtag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValidationEtag { get; set; }

        [Newtonsoft.Json.JsonProperty("executedValidations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ExecutedValidation> ExecutedValidations { get; set; }

        /// <summary>
        /// This specifies the pub, offer, sku and version of the image version metadata
        /// </summary>
        [Newtonsoft.Json.JsonProperty("platformAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<PlatformAttribute> PlatformAttributes { get; set; }

    }

    /// <summary>
    /// A UEFI key signature.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UefiKey
    {
        /// <summary>
        /// The type of key signature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UefiKeyType? Type { get; set; }

        /// <summary>
        /// The value of the key signature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> Value { get; set; }

    }

    /// <summary>
    /// Specifies information about the gallery inVMAccessControlProfile that you want to create or update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryInVMAccessControlProfile : Resource
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryInVMAccessControlProfileProperties Properties { get; set; }

    }

    /// <summary>
    /// This is the executed Validation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExecutedValidation
    {
        /// <summary>
        /// This property specifies the type of image version validation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// This property specifies the status of the validationProfile of the image version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExecutedValidationStatus? Status { get; set; }

        /// <summary>
        /// This property specifies the valid version of the validation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        /// <summary>
        /// This property specifies the starting timestamp.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("executionTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExecutionTime { get; set; }

    }

    /// <summary>
    /// This is the platform attribute of the image version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PlatformAttribute
    {
        /// <summary>
        /// This property specifies the name of the platformAttribute. It is read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// This property specifies the value of the corresponding name property. It is read-only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }

    /// <summary>
    /// Specifies information about the gallery inVMAccessControlProfile that you want to update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryInVMAccessControlProfileUpdate : UpdateResourceDefinition
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryInVMAccessControlProfileProperties Properties { get; set; }

    }

    /// <summary>
    /// Describes the properties of a gallery inVMAccessControlProfile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryInVMAccessControlProfileProperties : GalleryResourceProfilePropertiesBase
    {
        /// <summary>
        /// The description of this gallery inVMAccessControlProfile resources. This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// This property allows you to specify the OS type of the VMs/VMSS for which this profile can be used against. Possible values are: 'Windows' or 'Linux'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("osType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryInVMAccessControlProfilePropertiesOsType OsType { get; set; }

        /// <summary>
        /// This property allows you to specify the Endpoint type for which this profile is defining the access control for. Possible values are: 'WireServer' or 'IMDS'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicableHostEndpoint", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryInVMAccessControlProfilePropertiesApplicableHostEndpoint ApplicableHostEndpoint { get; set; }

    }

    /// <summary>
    /// The properties of a gallery ResourceProfile.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryResourceProfilePropertiesBase
    {
        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryProvisioningState? ProvisioningState { get; set; }

    }

    /// <summary>
    /// Specifies information about the gallery inVMAccessControlProfile version that you want to create or update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryInVMAccessControlProfileVersion : Resource
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryInVMAccessControlProfileVersionProperties Properties { get; set; }

    }

    /// <summary>
    /// Specifies information about the gallery inVMAccessControlProfile version that you want to update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryInVMAccessControlProfileVersionUpdate : UpdateResourceDefinition
    {
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GalleryInVMAccessControlProfileVersionProperties Properties { get; set; }

    }

    /// <summary>
    /// Describes the properties of an inVMAccessControlProfile version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryInVMAccessControlProfileVersionProperties : GalleryResourceProfileVersionPropertiesBase
    {
        /// <summary>
        /// This property allows you to specify whether the access control rules are in Audit mode, in Enforce mode or Disabled. Possible values are: 'Audit', 'Enforce' or 'Disabled'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryInVMAccessControlProfileVersionPropertiesMode Mode { get; set; }

        /// <summary>
        /// This property allows you to specify if the requests will be allowed to access the host endpoints. Possible values are: 'Allow', 'Deny'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultAccess", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryInVMAccessControlProfileVersionPropertiesDefaultAccess DefaultAccess { get; set; }

        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AccessControlRules Rules { get; set; }

    }

    /// <summary>
    /// This is the Access Control Rules specification for an inVMAccessControlProfile version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessControlRules
    {
        /// <summary>
        /// A list of privileges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privileges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AccessControlRulesPrivilege> Privileges { get; set; }

        /// <summary>
        /// A list of roles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AccessControlRulesRole> Roles { get; set; }

        /// <summary>
        /// A list of identities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AccessControlRulesIdentity> Identities { get; set; }

        /// <summary>
        /// A list of role assignments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roleAssignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<AccessControlRulesRoleAssignment> RoleAssignments { get; set; }

    }

    /// <summary>
    /// The properties of an Access Control Rule Privilege.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessControlRulesPrivilege
    {
        /// <summary>
        /// The name of the privilege.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The HTTP path corresponding to the privilege.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; }

        /// <summary>
        /// The query parameters to match in the path.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> QueryParameters { get; set; }

    }

    /// <summary>
    /// The properties of an Access Control Rule Role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessControlRulesRole
    {
        /// <summary>
        /// The name of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// A list of privileges needed by this role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("privileges", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<string> Privileges { get; set; } = new System.Collections.Generic.List<string>();

    }

    /// <summary>
    /// The properties of an Access Control Rule Identity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessControlRulesIdentity
    {
        /// <summary>
        /// The name of the identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The username corresponding to this identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserName { get; set; }

        /// <summary>
        /// The groupName corresponding to this identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupName { get; set; }

        /// <summary>
        /// The path to the executable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exePath", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExePath { get; set; }

        /// <summary>
        /// The process name of the executable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("processName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProcessName { get; set; }

    }

    /// <summary>
    /// The properties of an Access Control Rule RoleAssignment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessControlRulesRoleAssignment
    {
        /// <summary>
        /// The name of the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Role { get; set; }

        /// <summary>
        /// A list of identities that can access the privileges defined by the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identities", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<string> Identities { get; set; } = new System.Collections.Generic.List<string>();

    }

    /// <summary>
    /// The properties of a gallery ResourceProfile version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryResourceProfileVersionPropertiesBase
    {
        /// <summary>
        /// The target regions where the Resource Profile version is going to be replicated to. This property is updatable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetLocations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<TargetRegion> TargetLocations { get; set; }

        /// <summary>
        /// If set to true, Virtual Machines deployed from the latest version of the Resource Profile won't use this Profile version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("excludeFromLatest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExcludeFromLatest { get; set; }

        /// <summary>
        /// The timestamp for when the Resource Profile Version is published.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publishedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? PublishedDate { get; set; }

        [Newtonsoft.Json.JsonProperty("provisioningState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GalleryProvisioningState? ProvisioningState { get; set; }

        [Newtonsoft.Json.JsonProperty("replicationStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ReplicationStatus ReplicationStatus { get; set; }

    }

    /// <summary>
    /// The List Gallery InVMAccessControlProfiles operation response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryInVMAccessControlProfileList
    {
        /// <summary>
        /// A list of Gallery InVMAccessControlProfiles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<GalleryInVMAccessControlProfile> Value { get; set; } = new System.Collections.Generic.List<GalleryInVMAccessControlProfile>();

        /// <summary>
        /// The uri to fetch the next page of inVMAccessControlProfiles in the gallery. Call ListNext() with this to fetch the next page of gallery inVMAccessControlProfiles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// The List Gallery InVMAccessControlProfile Versions operation response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryInVMAccessControlProfileVersionList
    {
        /// <summary>
        /// A list of Gallery InVMAccessControlProfile Versions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<GalleryInVMAccessControlProfileVersion> Value { get; set; } = new System.Collections.Generic.List<GalleryInVMAccessControlProfileVersion>();

        /// <summary>
        /// The uri to fetch the next page of inVMAccessControlProfile versions. Call ListNext() with this to fetch the next page of gallery inVMAccessControlProfile versions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextLink", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextLink { get; set; }

    }

    /// <summary>
    /// An error response from the Compute service.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloudError
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The Resource model definition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Resource
    {
        /// <summary>
        /// Resource Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Resource name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Resource type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Resource location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Location { get; set; }

        /// <summary>
        /// Resource tags
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Tags { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserAssignedIdentities : System.Collections.Generic.Dictionary<string, Anonymous>
    {

    }

    /// <summary>
    /// This is the gallery image definition identifier.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryImageIdentifier
    {
        /// <summary>
        /// The name of the gallery image definition publisher.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publisher", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Publisher { get; set; }

        /// <summary>
        /// The name of the gallery image definition offer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Offer { get; set; }

        /// <summary>
        /// The name of the gallery image definition SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sku", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Sku { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RecommendedMachineConfiguration
    {
        [Newtonsoft.Json.JsonProperty("vCPUs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VCPUs VCPUs { get; set; }

        [Newtonsoft.Json.JsonProperty("memory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VCPUs Memory { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes the disallowed disk types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Disallowed
    {
        /// <summary>
        /// A list of disk types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("diskTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> DiskTypes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes the gallery image definition purchase plan. This is used by marketplace images.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ImagePurchasePlan
    {
        /// <summary>
        /// The plan ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The publisher ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("publisher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Publisher { get; set; }

        /// <summary>
        /// The product ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Product { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A feature for gallery image.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GalleryImageFeature
    {
        /// <summary>
        /// The name of the gallery image feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The value of the gallery image feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// The minimum gallery image version which supports this feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startsAtVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StartsAtVersion { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The architecture of the image. Applicable to OS disks only.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Architecture
    {

        [System.Runtime.Serialization.EnumMember(Value = @"x64")]
        X64 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Arm64")]
        Arm64 = 1,

    }

    /// <summary>
    /// The select expression to apply on the operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _select
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Permissions")]
        Permissions = 0,

    }

    /// <summary>
    /// The expand query option to apply on the operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _expand
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SharingProfile/Groups")]
        SharingProfile_Groups = 0,

    }

    /// <summary>
    /// The expand expression to apply on the operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum _expand2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ReplicationStatus")]
        ReplicationStatus = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UefiSettings")]
        UefiSettings = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SharingProfilePermissions
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Private")]
        Private = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Groups")]
        Groups = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Community")]
        Community = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SharingProfileGroupType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Subscriptions")]
        Subscriptions = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AADTenants")]
        AADTenants = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryIdentityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SystemAssigned")]
        SystemAssigned = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UserAssigned")]
        UserAssigned = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SystemAssigned, UserAssigned")]
        SystemAssigned__UserAssigned = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryApplicationPropertiesSupportedOSType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Linux")]
        Linux = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryApplicationCustomActionParameterType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"String")]
        String = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ConfigurationDataBlob")]
        ConfigurationDataBlob = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LogOutputBlob")]
        LogOutputBlob = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserArtifactSettingsScriptBehaviorAfterReboot
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Rerun")]
        Rerun = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryImagePropertiesOsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Linux")]
        Linux = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryImagePropertiesOsState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Generalized")]
        Generalized = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Specialized")]
        Specialized = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryImagePropertiesHyperVGeneration
    {

        [System.Runtime.Serialization.EnumMember(Value = @"V1")]
        V1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"V2")]
        V2 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryArtifactPublishingProfileBaseStorageAccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_LRS")]
        Standard_LRS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_ZRS")]
        Standard_ZRS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Premium_LRS")]
        Premium_LRS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PremiumV2_LRS")]
        PremiumV2_LRS = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryArtifactPublishingProfileBaseReplicationMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Full")]
        Full = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Shallow")]
        Shallow = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TargetRegionStorageAccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_LRS")]
        Standard_LRS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_ZRS")]
        Standard_ZRS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Premium_LRS")]
        Premium_LRS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PremiumV2_LRS")]
        PremiumV2_LRS = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AdditionalReplicaSetStorageAccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_LRS")]
        Standard_LRS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_ZRS")]
        Standard_ZRS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Premium_LRS")]
        Premium_LRS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PremiumV2_LRS")]
        PremiumV2_LRS = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryTargetExtendedLocationStorageAccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_LRS")]
        Standard_LRS = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Standard_ZRS")]
        Standard_ZRS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"StandardSSD_LRS")]
        StandardSSD_LRS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Premium_LRS")]
        Premium_LRS = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OSDiskImageSecurityProfileConfidentialVMEncryptionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EncryptedVMGuestStateOnlyWithPmk")]
        EncryptedVMGuestStateOnlyWithPmk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"EncryptedWithPmk")]
        EncryptedWithPmk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"EncryptedWithCmk")]
        EncryptedWithCmk = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NonPersistedTPM")]
        NonPersistedTPM = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryOSDiskImageHostCaching
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadOnly")]
        ReadOnly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ReadWrite")]
        ReadWrite = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PolicyViolationCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ImageFlaggedUnsafe")]
        ImageFlaggedUnsafe = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CopyrightValidation")]
        CopyrightValidation = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IpTheft")]
        IpTheft = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ReplicationStatusAggregatedState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RegionalReplicationStatusState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Replicating")]
        Replicating = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GallerySoftDeletedResourcePropertiesSoftDeletedArtifactType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Images")]
        Images = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SharingUpdateOperationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Add")]
        Add = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Remove")]
        Remove = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Reset")]
        Reset = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"EnableCommunity")]
        EnableCommunity = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UefiKeyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"sha256")]
        Sha256 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"x509")]
        X509 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ExecutedValidationStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryInVMAccessControlProfilePropertiesOsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Linux")]
        Linux = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryInVMAccessControlProfilePropertiesApplicableHostEndpoint
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WireServer")]
        WireServer = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IMDS")]
        IMDS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryInVMAccessControlProfileVersionPropertiesMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Audit")]
        Audit = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Enforce")]
        Enforce = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GalleryInVMAccessControlProfileVersionPropertiesDefaultAccess
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Allow")]
        Allow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Deny")]
        Deny = 1,

    }

    /// <summary>
    /// Api error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// The Api error details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Details> Details { get; set; }

        /// <summary>
        /// The Api inner error
        /// </summary>
        [Newtonsoft.Json.JsonProperty("innererror", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Innererror Innererror { get; set; }

        /// <summary>
        /// The error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// The target of the particular error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }

        /// <summary>
        /// The error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {
        /// <summary>
        /// The principal id of user assigned identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("principalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrincipalId { get; set; }

        /// <summary>
        /// The client id of user assigned identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Describes the resource range.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VCPUs
    {
        /// <summary>
        /// The minimum number of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("min", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Min { get; set; }

        /// <summary>
        /// The maximum number of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Max { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Api error base.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Details
    {
        /// <summary>
        /// The error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// The target of the particular error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }

        /// <summary>
        /// The error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Inner error details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Innererror
    {
        /// <summary>
        /// The exception type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptiontype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exceptiontype { get; set; }

        /// <summary>
        /// The internal error message or exception dump.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errordetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Errordetail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625